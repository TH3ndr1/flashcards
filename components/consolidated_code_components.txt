=== theme-provider.tsx ===
'use client'

import * as React from 'react'
import {
  ThemeProvider as NextThemesProvider,
  type ThemeProviderProps,
} from 'next-themes'

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}

=== ui/aspect-ratio.tsx ===
"use client"

import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }

=== ui/alert-dialog.tsx ===
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

=== ui/use-mobile.tsx ===
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}

=== ui/pagination.tsx ===
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}

=== ui/tabs.tsx ===
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

=== ui/card.tsx ===
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

=== ui/slider.tsx ===
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }

=== ui/popover.tsx ===
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }

=== ui/page-heading.tsx ===
import React from 'react';
import { ArrowLeft } from 'lucide-react';
import Link from 'next/link';

interface PageHeadingProps {
  title: string;
  description?: string;
  backHref?: string;
}

export function PageHeading({ title, description, backHref }: PageHeadingProps) {
  return (
    <div className="space-y-2">
      <div className="flex items-center">
        {backHref && (
          <Link 
            href={backHref} 
            className="mr-4 inline-flex h-8 w-8 items-center justify-center rounded-md hover:bg-muted"
            aria-label="Go back"
          >
            <ArrowLeft className="h-4 w-4" />
          </Link>
        )}
        <h1 className="text-xl font-semibold tracking-tight">{title}</h1>
      </div>
      {description && (
        <p className="text-sm text-muted-foreground">{description}</p>
      )}
    </div>
  );
} 
=== ui/progress.tsx ===
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }

=== ui/input-otp.tsx ===
"use client"

import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }

=== ui/chart.tsx ===
"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}

=== ui/hover-card.tsx ===
"use client"

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }

=== ui/sheet.tsx ===
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}

=== ui/scroll-area.tsx ===
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

=== ui/resizable.tsx ===
"use client"

import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }

=== ui/label.tsx ===
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

=== ui/sonner.tsx ===
"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }

=== ui/navigation-menu.tsx ===
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}

=== ui/accordion.tsx ===
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

=== ui/drawer.tsx ===
"use client"

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}

=== ui/tooltip.tsx ===
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

=== ui/alert.tsx ===
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }

=== ui/switch.tsx ===
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }

=== ui/calendar.tsx ===
"use client"

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ...props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ...props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }

=== ui/breadcrumb.tsx ===
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}

=== ui/radio-group.tsx ===
"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }

=== ui/command.tsx ===
"use client"

import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({ children, ...props }: DialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}

=== ui/toggle-group.tsx ===
"use client"

import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }

=== ui/avatar.tsx ===
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

=== ui/menubar.tsx ===
"use client"

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}

=== ui/dialog.tsx ===
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

=== ui/badge.tsx ===
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

=== ui/sidebar.tsx ===
"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        if (typeof document !== 'undefined') {
          document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
        }
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      if (typeof window === 'undefined') return

      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}

=== ui/table.tsx ===
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

=== ui/separator.tsx ===
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

=== ui/button.tsx ===
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

=== ui/toggle.tsx ===
"use client"

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3 min-w-10",
        sm: "h-9 px-2.5 min-w-9",
        lg: "h-11 px-5 min-w-11",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }

=== ui/checkbox.tsx ===
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }

=== ui/collapsible.tsx ===
"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }

=== ui/dropdown-menu.tsx ===
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

=== ui/select.tsx ===
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

=== ui/textarea.tsx ===
import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<"textarea">
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }

=== ui/input.tsx ===
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

=== ui/skeleton.tsx ===
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }

=== ui/context-menu.tsx ===
"use client"

import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}

=== ui/form.tsx ===
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

=== ui/carousel.tsx ===
"use client"

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}

=== user-nav.tsx ===
"use client"

import { User } from "lucide-react"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"

export function UserNavButton() {
  const router = useRouter()

  return (
    <TooltipProvider>
      <Tooltip>
        <TooltipTrigger asChild>
          <Button
            variant="outline"
            size="icon"
            onClick={() => router.push("/profile")}
          >
            <User className="h-5 w-5" />
          </Button>
        </TooltipTrigger>
        <TooltipContent>
          <p>Profile</p>
        </TooltipContent>
      </Tooltip>
    </TooltipProvider>
  )
} 
=== study-completion-screen.tsx ===
// components/study-completion-screen.tsx
"use client";

import Link from 'next/link';
import { ArrowLeft, Trophy } from 'lucide-react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { StudyProgress } from '@/components/study-progress'; // Assuming this path is correct
import { DeckHeader } from '@/components/deck-header'; // Assuming this path is correct

interface StudyCompletionScreenProps {
  // Deck Info
  deckId: string;
  deckName: string;
  totalCards: number;
  cardsReviewedCount: number;

  // Progress Info
  masteredCount: number;
  totalAchievedCorrectAnswers: number;
  totalRequiredCorrectAnswers: number;
  overallProgressPercent: number;
  masteryProgressPercent: number;

  // Action Handlers
  onResetProgress: () => void; // Practice all
  onPracticeDifficult: () => void;
  onStudyAgain: () => void; // <-- Add handler for Study Again

  // Context
  difficultCardsCount: number;
  isDifficultModeCompletion: boolean; // True if completing a "difficult cards only" session

  srsProgression: {
    newToLearning: number;
    learningToReview: number;
    stayedInLearning: number;
    droppedToLearning: number;
  };
}

export function StudyCompletionScreen({
  deckId,
  deckName,
  totalCards,
  cardsReviewedCount,
  masteredCount,
  totalAchievedCorrectAnswers,
  totalRequiredCorrectAnswers,
  overallProgressPercent,
  masteryProgressPercent,
  onResetProgress,
  onPracticeDifficult,
  onStudyAgain, // <-- Destructure handler
  difficultCardsCount,
  isDifficultModeCompletion,
  srsProgression,
}: StudyCompletionScreenProps) {

  const hasRemainingDifficult = difficultCardsCount > 0;

  const title = isDifficultModeCompletion ? "Well Done! 🍪" : "Congratulations! 🎉";
  let message: string;

  if (isDifficultModeCompletion) {
    message = hasRemainingDifficult
      ? `You've mastered this set of difficult cards! However, there are still ${difficultCardsCount} difficult ${difficultCardsCount === 1 ? 'card' : 'cards'} to practice.`
      : "You've mastered all the difficult cards! Each card has been answered correctly 3 times.";
  } else {
     message = `You've mastered all ${totalCards} cards in this deck!`;
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <Card className="max-w-2xl mx-auto">
        <CardHeader className="text-center">
          <div className="mx-auto mb-4 h-12 w-12 text-primary">
            <Trophy className="h-12 w-12" />
          </div>
          <CardTitle className="text-2xl">Session Complete!</CardTitle>
          <CardDescription>
            You've completed your study session for {deckName}
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* Session Statistics */}
          <div className="rounded-lg bg-muted p-6">
            <h3 className="text-lg font-semibold mb-4">Session Summary</h3>
            <div className="grid gap-4 text-sm">
              <div className="flex justify-between items-center">
                <span className="text-muted-foreground">Cards Reviewed:</span>
                <span className="font-medium">{cardsReviewedCount}</span>
              </div>
              
              {/* SRS Progression */}
              <div className="border-t pt-4 mt-2">
                <h4 className="font-medium mb-3">SRS Level Changes:</h4>
                <div className="space-y-2">
                  {srsProgression.newToLearning > 0 && (
                    <div className="flex justify-between items-center text-blue-500">
                      <span>New → Learning:</span>
                      <span>+{srsProgression.newToLearning}</span>
                    </div>
                  )}
                  {srsProgression.learningToReview > 0 && (
                    <div className="flex justify-between items-center text-green-500">
                      <span>Learning → Review:</span>
                      <span>+{srsProgression.learningToReview}</span>
                    </div>
                  )}
                  {srsProgression.stayedInLearning > 0 && (
                    <div className="flex justify-between items-center text-amber-500">
                      <span>Stayed in Learning:</span>
                      <span>{srsProgression.stayedInLearning}</span>
                    </div>
                  )}
                  {srsProgression.droppedToLearning > 0 && (
                    <div className="flex justify-between items-center text-red-500">
                      <span>Dropped to Learning:</span>
                      <span>{srsProgression.droppedToLearning}</span>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>

          {/* Action Buttons */}
          <div className="flex flex-col sm:flex-row gap-3 justify-center pt-4">
            <Link href="/" passHref>
              <Button variant="outline" className="w-full sm:w-auto">
                <ArrowLeft className="mr-2 h-4 w-4" />
                Return Home
              </Button>
            </Link>
            <Button className="w-full sm:w-auto" onClick={onStudyAgain}>
              Study Again
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
=== study/StudySetListClient.tsx ===
"use client";

import { useState } from 'react';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { Edit, Terminal } from 'lucide-react';
import { formatDistanceToNow } from 'date-fns';
import type { Tables } from '@/types/database';
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { StudyModeButtons } from '@/components/study/StudyModeButtons';

// Type for the study set data
type StudySet = Tables<'study_sets'>;

interface StudySetListClientProps {
  initialData?: StudySet[];
}

export function StudySetListClient({ initialData = [] }: StudySetListClientProps) {
  const [studySets] = useState<StudySet[]>(initialData);
  const isLoading = false; // No loading state needed with server-side data
  const error = null; // No error state needed with server-side data

  // Render empty state if no study sets
  if (studySets.length === 0) {
    return (
      <p className="text-center text-muted-foreground mt-10">You haven't created any smart playlists yet.</p>
    );
  }

  // Render the study sets grid
  return (
    <TooltipProvider>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {studySets.map((set) => (
          <Card key={set.id} className="hover:shadow-md transition-shadow flex flex-col bg-gradient-to-b from-slate-100/40 dark:from-slate-800/40 to-transparent">
            <CardHeader className="pt-4 pb-2 space-y-1 px-4">
              <div className="flex justify-between items-center">
                <CardTitle className="truncate" title={set.name}>{set.name}</CardTitle>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Button 
                      variant="ghost" 
                      size="icon" 
                      className="h-7 w-7 flex-shrink-0 text-muted-foreground" 
                      aria-label={`Edit ${set.name}`}
                      asChild
                    >
                      <Link href={`/study/sets/${set.id}/edit`}> 
                        <Edit className="h-4 w-4" />
                      </Link>
                    </Button>
                  </TooltipTrigger>
                  <TooltipContent>
                    <p>Edit Playlist</p>
                  </TooltipContent>
                </Tooltip>
              </div>
              <CardDescription>
                {set.description || `Updated ${formatDistanceToNow(new Date(set.updated_at), { addSuffix: true })}`}
              </CardDescription>
            </CardHeader>
            <CardFooter className="flex justify-end items-center mt-auto pt-4">
              <StudyModeButtons
                studyType="studySet"
                contentId={set.id}
                size="sm"
              />
            </CardFooter>
          </Card>
        ))}
      </div>
    </TooltipProvider>
  );
} 
=== study/StudySetBuilder.tsx ===
// components/study/StudySetBuilder.tsx
'use client';

import React, { useMemo, useCallback } from 'react'; // Removed useState
// Import the hook and its return type
import { useStudySetForm, UseStudySetFormReturn, StudySetBuilderFormData } from '@/hooks/useStudySetForm'; // Import form data type
// Import UI components
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Checkbox } from '@/components/ui/checkbox';
import { Popover, PopoverTrigger, PopoverContent } from '@/components/ui/popover';
import { Command, CommandInput, CommandList, CommandItem, CommandGroup, CommandEmpty } from '@/components/ui/command';
import { Calendar } from "@/components/ui/calendar";
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
// Keep type imports needed for props and rendering helpers
import type { StudyQueryCriteria } from '@/lib/schema/study-query.schema';
import type { Database, Tables } from "@/types/database";
type DbTag = Tables<'tags'>;

import { cn } from "@/lib/utils";
import { CalendarIcon, Check, ChevronsUpDown, Loader2 as IconLoader, Plus as IconPlus, X as IconX } from "lucide-react";
import { format, isValid } from "date-fns";
import { Badge } from '@/components/ui/badge';
import { DateRange } from "react-day-picker";


// --- Type Guard for DateRange ---
function isDateRange(value: unknown): value is DateRange {
  return typeof value === 'object' && value !== null && ('from' in value || 'to' in value);
}


// --- Component Props ---
interface StudySetBuilderProps {
  initialData?: { id?: string; name: string; description?: string | null; criteria: StudyQueryCriteria; };
  onSave: (data: { name: string; description: string | null; criteria: StudyQueryCriteria }) => Promise<void>;
  isSaving?: boolean;
}

// --- Component Implementation ---
export function StudySetBuilder({ initialData, onSave, isSaving = false }: StudySetBuilderProps) {
  // Use the hook to get form state, data, and handlers
  const {
    form,
    isLoading,
    tagsError,
    decksError,
    allTags,
    decks,
    onSubmit,
    watchedOperators,
    watchedFilterValues,
    allowedOperators,
  } = useStudySetForm({ initialData, onSave, isSaving });

  // Destructure watched values for easier use in JSX
  const { srsLevelOperator } = watchedOperators;
  const { includeTags } = watchedFilterValues;

  // --- FIX: Move Render Helper Functions INSIDE the component ---
  // Wrap in useCallback to stabilize references if needed, include deps

  const renderDateValueInputs = useCallback((
      opField: keyof typeof watchedOperators,
      daysField: keyof StudySetBuilderFormData,
      dateField: keyof StudySetBuilderFormData,
      rangeField: keyof StudySetBuilderFormData
  ) => {
      // Access form and watched values from the component's scope
      const operator = form.watch(opField);
      const showDays = operator === 'newerThanDays' || operator === 'olderThanDays';
      const showDate = operator === 'onDate';
      const showRange = operator === 'betweenDates';
      const showAnyValueInput = showDays || showDate || showRange;

      return (
          <div className={`flex-grow grid grid-cols-1 sm:grid-cols-2 gap-2 ${showAnyValueInput ? 'mt-2 sm:mt-0' : 'hidden'}`}>
              {/* Days Input - Ensure value is string for Input, handle number conversion in onChange */}
              <FormField control={form.control} name={daysField} render={({ field }) => (<FormItem className={showDays ? '' : 'hidden'}><FormLabel className="sr-only">Days</FormLabel><FormControl><Input type="number" placeholder="Days" {...field} value={typeof field.value === 'number' ? String(field.value) : ''} onChange={e => field.onChange(e.target.value === '' ? null : parseInt(e.target.value, 10))} disabled={isLoading || !showDays} min="1" /></FormControl><FormMessage /></FormItem>)} />
              {/* Date Input - Add type checks */}
              <FormField control={form.control} name={dateField} render={({ field }) => (<FormItem className={`flex flex-col ${showDate ? '' : 'hidden'}`}><FormLabel className="sr-only">Date</FormLabel><Popover><PopoverTrigger asChild><FormControl><Button variant={"outline"} className={cn("w-full justify-start text-left font-normal", !field.value && "text-muted-foreground")} disabled={isLoading || !showDate}><CalendarIcon className="mr-2 h-4 w-4" />{field.value instanceof Date && isValid(field.value) ? format(field.value, "PPP") : <span>Pick a date</span>}</Button></FormControl></PopoverTrigger><PopoverContent className="w-auto p-0" align="start"><Calendar mode="single" selected={field.value instanceof Date ? field.value : undefined} onSelect={field.onChange} initialFocus /></PopoverContent></Popover><FormMessage /></FormItem>)} />
              {/* Date Range Input - Add type guards */}
              <FormField control={form.control} name={rangeField} render={({ field }) => {
                const currentRange = isDateRange(field.value) ? field.value : undefined;
                const fromValid = currentRange?.from instanceof Date && isValid(currentRange.from);
                const toValid = currentRange?.to instanceof Date && isValid(currentRange.to);
                return (
                  <FormItem className={`flex flex-col ${showRange ? '' : 'hidden'}`}>
                    <FormLabel className="sr-only">Date Range</FormLabel>
                    <Popover>
                      <PopoverTrigger asChild>
                        <FormControl>
                          <Button id={rangeField as string} variant={"outline"} className={cn("w-full justify-start text-left font-normal", !currentRange?.from && !currentRange?.to && "text-muted-foreground")} disabled={isLoading || !showRange}>
                            <CalendarIcon className="mr-2 h-4 w-4" />
                            {fromValid && toValid ? (
                              <>{format(currentRange.from!, "LLL dd, y")} - {format(currentRange.to!, "LLL dd, y")}</>
                            ) : fromValid ? (
                              `From ${format(currentRange.from!, "LLL dd, y")}`
                            ) : toValid ? (
                              `To ${format(currentRange.to!, "LLL dd, y")}`
                            ) : (
                              <span>Pick a date range</span>
                            )}
                          </Button>
                        </FormControl>
                      </PopoverTrigger>
                      <PopoverContent className="w-auto p-0" align="start">
                        <Calendar
                          initialFocus
                          mode="range"
                          defaultMonth={currentRange?.from instanceof Date ? currentRange.from : undefined}
                          selected={currentRange}
                          onSelect={field.onChange}
                          numberOfMonths={2}
                        />
                      </PopoverContent>
                    </Popover>
                    <FormMessage />
                  </FormItem>
                );
              }} />
          </div>
      );
   // Dependencies now include form and isLoading from the hook's scope
  }, [form, isLoading]);


  const renderTagMultiSelect = useCallback((
      fieldName: "includeTags" | "excludeTags",
      label: string,
      description: string
  ) => {
      // Internal helper - ok inside useCallback
      const getTagObjects = (ids: string[] = [], all: DbTag[] = []): DbTag[] => {
          if (!Array.isArray(all)) return [];
          const idMap = new Map(all.map(tag => [tag.id, tag]));
          return ids.map(id => idMap.get(id)).filter((tag): tag is DbTag => tag !== undefined);
      };

      return (
           <FormField
                control={form.control} // Access form from component scope
                name={fieldName}
                render={({ field }) => {
                    // Use allTags from component scope (provided by hook)
                    const selectedTagObjects = getTagObjects(field.value, allTags);
                    const availableOptions = Array.isArray(allTags)
                        ? allTags.filter(tag => !(Array.isArray(field.value) && field.value.includes(tag.id))).sort((a, b) => a.name.localeCompare(b.name))
                        : [];

                    const handleSelect = (tagId: string) => form.setValue(fieldName, [...(Array.isArray(field.value) ? field.value : []), tagId], { shouldValidate: true, shouldDirty: true });
                    const handleRemove = (tagId: string) => form.setValue(fieldName, (Array.isArray(field.value) ? field.value : []).filter((id) => id !== tagId), { shouldValidate: true, shouldDirty: true });

                    return (
                        <FormItem>
                            <FormLabel className="text-base">{label}</FormLabel>
                            <div className="flex flex-wrap gap-1 mb-2 min-h-[24px]">
                                {selectedTagObjects.map((tag) => ( <Badge key={`${fieldName}-${tag.id}`} variant="secondary" className="flex items-center gap-1">{tag.name}<Button variant="ghost" size="icon" onClick={() => handleRemove(tag.id)} disabled={isLoading} aria-label={`Remove tag ${tag.name}`} className="h-4 w-4 p-0 ml-1 rounded-full hover:bg-muted-foreground/20"><IconX className="h-3 w-3" /></Button></Badge> ))}
                            </div>
                            <Popover>
                                <PopoverTrigger asChild><Button variant="outline" role="combobox" className="w-[200px] justify-start font-normal" disabled={isLoading}> {isLoading ? 'Loading...' : `+ Add Tag`} </Button></PopoverTrigger>
                                <PopoverContent className="w-[200px] p-0" align="start"><Command filter={(value, search) => { const tag = allTags?.find(t => t.id === value); return tag?.name.toLowerCase().includes(search.toLowerCase()) ? 1 : 0; }}><CommandInput placeholder="Search tags..." /><CommandList><CommandEmpty>No tags found.</CommandEmpty><CommandGroup>{availableOptions.map((tag) => (<CommandItem key={tag.id} value={tag.id} onSelect={() => handleSelect(tag.id)}>{tag.name}</CommandItem>))}</CommandGroup></CommandList></Command></PopoverContent>
                            </Popover>
                            <FormDescription>{description}</FormDescription>
                            <FormMessage />
                        </FormItem>
                    );
                }}
            />
      );
  // Dependencies now include form, isLoading, and allTags from the hook's scope
  }, [form, isLoading, allTags]);


  // Handle loading/error states from hook
  if (tagsError || decksError) { return <p className="text-destructive">Error loading required data: {tagsError || decksError}</p>; }
  // Optional: Loading indicator
  // if (isLoading && !initialData) { return <p>Loading builder options...</p>; }


  return (
    // Use the form object returned by the hook
    <Form {...form}>
      {/* Pass the onSubmit handler returned by the hook */}
      <form onSubmit={onSubmit} className="space-y-8">
            {/* Name, Description Fields */}
            <FormField control={form.control} name="name" render={({ field }) => (<FormItem><FormLabel>Study Set Name</FormLabel><FormControl><Input placeholder="e.g., Hard Verbs Chapter 1" {...field} disabled={isLoading} /></FormControl><FormMessage /></FormItem>)} />
            <FormField control={form.control} name="description" render={({ field }) => (<FormItem><FormLabel>Description (Optional)</FormLabel><FormControl><Textarea placeholder="Describe what this set includes..." {...field} value={field.value ?? ''} onChange={field.onChange} disabled={isLoading} /></FormControl><FormMessage /></FormItem>)} />

            <hr/>
            <h3 className="text-lg font-medium border-b pb-2">Filter Criteria</h3>

            {/* Deck Selector */}
            <FormField control={form.control} name="selectedDeckId" render={({ field }) => (<FormItem><FormLabel>Include Cards From Deck (Optional)</FormLabel><Select onValueChange={(value) => field.onChange(value === 'none' ? null : value)} value={field.value ?? 'none'} disabled={isLoading}><FormControl><SelectTrigger><SelectValue placeholder="-- Any Deck --" /></SelectTrigger></FormControl><SelectContent><SelectItem value="none">-- Any Deck --</SelectItem>{(Array.isArray(decks) ? decks : []).map(deck => (<SelectItem key={deck.id} value={deck.id}>{deck.name}</SelectItem>))}</SelectContent></Select><FormDescription>If selected, only cards from this deck will be included.</FormDescription><FormMessage /></FormItem>)} />

            {/* Tag Filters using MultiSelect */}
             <div className="space-y-6 p-4 border rounded-md">
                 {/* Call helper */}
                 {renderTagMultiSelect("includeTags", "Include Tags (Optional)", "Select tags to include in the study set.")}

                 <FormField control={form.control} name="tagLogic" render={({ field }) => ( <FormItem className={includeTags?.length ? 'mt-2' : 'hidden'}> <FormLabel>Tag Logic</FormLabel><Select onValueChange={field.onChange} value={field.value} disabled={isLoading}><FormControl><SelectTrigger className="w-[200px]"><SelectValue /></SelectTrigger></FormControl><SelectContent><SelectItem value="ANY">Match ANY</SelectItem><SelectItem value="ALL">Match ALL</SelectItem></SelectContent></Select><FormMessage /></FormItem> )}/>

                 {/* Call helper */}
                 {renderTagMultiSelect("excludeTags", "Exclude Tags (Optional)", "Cards with these tags will be excluded.")}
            </div>

            {/* --- Filter Sections --- */}
            <div className="space-y-6">
                {/* Created Date */}
                <div className="space-y-3 p-4 border rounded-md">
                    <Label className="text-base font-medium">Created Date</Label>
                    <div className="flex flex-col sm:flex-row items-start sm:items-end gap-2">
                        <FormField control={form.control} name="createdDateOperator" render={({ field }) => (<FormItem className="w-full sm:flex-shrink-0 sm:w-auto sm:min-w-[180px]"><FormLabel className="sr-only">Condition</FormLabel><Select onValueChange={(value) => { field.onChange(value === 'any' ? null : value); form.resetField("createdDateValueDays"); form.resetField("createdDateValueDate"); form.resetField("createdDateValueRange");}} value={field.value ?? 'any'} disabled={isLoading}><FormControl><SelectTrigger><SelectValue placeholder="Any Date" /></SelectTrigger></FormControl><SelectContent><SelectItem value="any">Any Date</SelectItem>{allowedOperators.createdUpdatedOps.map(op => <SelectItem key={op} value={op}>{op}</SelectItem>)}</SelectContent></Select><FormMessage /></FormItem>)} />
                        {renderDateValueInputs('createdDateOperator', 'createdDateValueDays', 'createdDateValueDate', 'createdDateValueRange')}
                    </div>
                </div>

                {/* Updated Date */}
                <div className="space-y-3 p-4 border rounded-md">
                     <Label className="text-base font-medium">Updated Date</Label>
                    <div className="flex flex-col sm:flex-row items-start sm:items-end gap-2">
                        <FormField control={form.control} name="updatedDateOperator" render={({ field }) => (<FormItem className="w-full sm:flex-shrink-0 sm:w-auto sm:min-w-[180px]"><FormLabel className="sr-only">Condition</FormLabel><Select onValueChange={(value) => { field.onChange(value === 'any' ? null : value); form.resetField("updatedDateValueDays"); form.resetField("updatedDateValueDate"); form.resetField("updatedDateValueRange");}} value={field.value ?? 'any'} disabled={isLoading}><FormControl><SelectTrigger><SelectValue placeholder="Any Date" /></SelectTrigger></FormControl><SelectContent><SelectItem value="any">Any Date</SelectItem>{allowedOperators.createdUpdatedOps.map(op => <SelectItem key={op} value={op}>{op}</SelectItem>)}</SelectContent></Select><FormMessage /></FormItem>)} />
                        {renderDateValueInputs('updatedDateOperator', 'updatedDateValueDays', 'updatedDateValueDate', 'updatedDateValueRange')}
                    </div>
                </div>

               {/* Last Reviewed Date */}
                <div className="space-y-3 p-4 border rounded-md">
                   <Label className="text-base font-medium">Last Reviewed Date</Label>
                   <div className="flex flex-col sm:flex-row items-start sm:items-end gap-2">
                       <FormField control={form.control} name="lastReviewedOperator" render={({ field }) => (<FormItem className="w-full sm:flex-shrink-0 sm:w-auto sm:min-w-[180px]"><FormLabel className="sr-only">Condition</FormLabel><Select onValueChange={(value) => { field.onChange(value === 'any' ? null : value); form.resetField("lastReviewedValueDays"); form.resetField("lastReviewedValueDate"); form.resetField("lastReviewedValueRange");}} value={field.value ?? 'any'} disabled={isLoading}><FormControl><SelectTrigger><SelectValue placeholder="Any / Never" /></SelectTrigger></FormControl><SelectContent><SelectItem value="any">Any / Never</SelectItem>{allowedOperators.lastReviewedOps.map(op => <SelectItem key={op} value={op}>{op}</SelectItem>)}</SelectContent></Select><FormMessage /></FormItem>)} />
                       {renderDateValueInputs('lastReviewedOperator', 'lastReviewedValueDays', 'lastReviewedValueDate', 'lastReviewedValueRange')}
                   </div>
               </div>

               {/* Next Review Due Date */}
               <div className="space-y-3 p-4 border rounded-md">
                   <Label className="text-base font-medium">Next Review Due Date</Label>
                   <div className="flex flex-col sm:flex-row items-start sm:items-end gap-2">
                       <FormField control={form.control} name="nextReviewDueOperator" render={({ field }) => (<FormItem className="w-full sm:flex-shrink-0 sm:w-auto sm:min-w-[180px]"><FormLabel className="sr-only">Condition</FormLabel><Select onValueChange={(value) => { field.onChange(value === 'any' ? null : value); form.resetField("nextReviewDueValueDays"); form.resetField("nextReviewDueValueDate"); form.resetField("nextReviewDueValueRange");}} value={field.value ?? 'any'} disabled={isLoading}><FormControl><SelectTrigger><SelectValue placeholder="Any / Never / Due" /></SelectTrigger></FormControl><SelectContent><SelectItem value="any">Any / Never / Due</SelectItem>{allowedOperators.nextReviewDueOps.map(op => <SelectItem key={op} value={op}>{op}</SelectItem>)}</SelectContent></Select><FormMessage /></FormItem>)} />
                       {renderDateValueInputs('nextReviewDueOperator', 'nextReviewDueValueDays', 'nextReviewDueValueDate', 'nextReviewDueValueRange')}
                   </div>
               </div>

               {/* SRS Level Filter */}
                <div className="space-y-3 p-4 border rounded-md">
                    <Label className="text-base font-medium">SRS Level</Label>
                    <div className="flex flex-col sm:flex-row items-start sm:items-end gap-2">
                        <FormField control={form.control} name="srsLevelOperator" render={({ field }) => (<FormItem className="w-full sm:flex-shrink-0 sm:w-auto sm:min-w-[180px]"><FormLabel className="sr-only">Condition</FormLabel><Select onValueChange={(value) => { field.onChange(value === 'any' ? null : value); form.resetField("srsLevelValue"); }} value={field.value ?? 'any'} disabled={isLoading}><FormControl><SelectTrigger><SelectValue placeholder="Any Level" /></SelectTrigger></FormControl><SelectContent><SelectItem value="any">Any Level</SelectItem>{allowedOperators.srsLevelOps.map(op => <SelectItem key={op} value={op}>{op}</SelectItem>)}</SelectContent></Select><FormMessage /></FormItem>)} />
                        <div className={`flex-grow grid grid-cols-1 gap-2 ${srsLevelOperator ? 'mt-2 sm:mt-0' : 'hidden'}`}>
                            <FormField control={form.control} name="srsLevelValue" render={({ field }) => (<FormItem><FormLabel className="sr-only">Level</FormLabel><FormControl><Input type="number" placeholder="Level (e.g., 0, 1, 5)" {...field} value={typeof field.value === 'number' ? String(field.value) : ''} onChange={e => field.onChange(e.target.value === '' ? null : parseInt(e.target.value, 10))} disabled={isLoading || !srsLevelOperator} min="0" /></FormControl><FormMessage /></FormItem>)} />
                        </div>
                    </div>
                </div>

                {/* Include Difficult Cards Checkbox */}
                <div className="p-4 border rounded-md">
                  <FormField control={form.control} name="includeDifficult" render={({ field }) => (<FormItem className="flex flex-row items-start space-x-3 space-y-0"><FormControl><Checkbox checked={!!field.value} onCheckedChange={field.onChange} disabled={isLoading} /></FormControl><div className="space-y-1 leading-none"><FormLabel className="text-base">Only Include Difficult Cards</FormLabel><FormDescription>Filters for cards currently in the 'learning' SRS stage.</FormDescription></div><FormMessage /></FormItem>)} />
                </div>
            </div> {/* End Filter Criteria Wrapper */}


            {/* Submit Button */}
            <Button type="submit" disabled={isLoading || isSaving} className="w-full">
                {isSaving ? <IconLoader className="animate-spin mr-2 h-4 w-4" /> : null}
                {initialData?.id ? 'Update Study Set' : 'Create Study Set'}
            </Button>
      </form>
    </Form>
  );
}
=== study/StudyModeButtons.tsx ===
'use client';

import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { useRouter } from 'next/navigation';
import { resolveStudyQuery } from '@/lib/actions/studyQueryActions';
import { getCardSrsStatesByIds } from '@/lib/actions/cardSrsActions';
import { useStudySessionStore, type StudyInput, type StudyMode } from '@/store/studySessionStore';
import { Loader2 as IconLoader, GraduationCap, Play } from 'lucide-react';
import { toast } from 'sonner';
import { isValid, parseISO } from 'date-fns';
import type { Tables } from "@/types/database";
import React from 'react';

interface StudyModeButtonsProps {
  /** Type of content to study - either a deck or a study set */
  studyType: 'deck' | 'studySet';
  /** ID of the deck or study set */
  contentId: string;
  /** Optional CSS class to apply to the button container */
  className?: string;
  /** Optional size variant for the buttons */
  size?: 'default' | 'sm' | 'lg';
  /** Optional label for the Learn button (default: "Learn") */
  learnLabel?: string;
  /** Optional label for the Review button (default: "Review") */
  reviewLabel?: string;
  /** Pre-calculated learn count (if provided, skips fetching) */
  preCalculatedLearnCount?: number;
  /** Pre-calculated review count (if provided, skips fetching) */
  preCalculatedReviewCount?: number;
  /** Whether a parent component is performing a batch fetch operation */
  batchFetchInProgress?: boolean;
}

export function StudyModeButtons({
  studyType,
  contentId,
  className = '',
  size = 'default',
  learnLabel = 'Learn',
  reviewLabel = 'Review',
  preCalculatedLearnCount,
  preCalculatedReviewCount,
  batchFetchInProgress = false
}: StudyModeButtonsProps) {
  const router = useRouter();
  const setStudyParameters = useStudySessionStore((state) => state.setStudyParameters);
  const clearStudyParameters = useStudySessionStore((state) => state.clearStudyParameters);
  
  // If we have counts, we're not loading; if batch fetch is in progress but no counts yet, we're loading
  const [isLoading, setIsLoading] = useState(
    preCalculatedLearnCount === undefined && 
    (batchFetchInProgress || preCalculatedReviewCount === undefined)
  );
  const [learnCount, setLearnCount] = useState(preCalculatedLearnCount ?? 0);
  const [reviewCount, setReviewCount] = useState(preCalculatedReviewCount ?? 0);
  const [error, setError] = useState<string | null>(null);
  
  // Add a ref to track if we've already fetched for this contentId
  const fetchedRef = React.useRef<{[key: string]: boolean}>({});

  // Log props on mount for debugging
  useEffect(() => {
    console.log(`[StudyModeButtons] Mounted with props for ${contentId}:`, {
      preCalculatedLearnCount,
      preCalculatedReviewCount,
      batchFetchInProgress,
      initialIsLoading: isLoading
    });
  }, []);

  // Effect to update loading state when preCalculated counts change
  useEffect(() => {
    // If we have pre-calculated counts, we're no longer loading
    if (preCalculatedLearnCount !== undefined && preCalculatedReviewCount !== undefined) {
      console.log(`[StudyModeButtons] Received pre-calculated counts for ${contentId}:`, 
        { learn: preCalculatedLearnCount, review: preCalculatedReviewCount });
      setIsLoading(false);
      
      // Also update the count state values to match the pre-calculated values
      setLearnCount(preCalculatedLearnCount);
      setReviewCount(preCalculatedReviewCount);
    }
  }, [preCalculatedLearnCount, preCalculatedReviewCount, contentId]);

  // Track loading state changes
  useEffect(() => {
    console.log(`[StudyModeButtons] Loading state for ${contentId} is now:`, isLoading);
  }, [isLoading, contentId]);

  useEffect(() => {
    // Skip fetching if we have pre-calculated counts
    if (preCalculatedLearnCount !== undefined && preCalculatedReviewCount !== undefined) {
      return;
    }
    
    // Skip if parent is doing a batch fetch
    if (batchFetchInProgress) {
      console.log(`[StudyModeButtons] Skipping fetch for ${contentId} - batch fetch in progress`);
      return;
    }
    
    // Skip if we've already fetched for this content ID
    if (fetchedRef.current[contentId]) {
      return;
    }
    
    const fetchCardCounts = async () => {
      if (!contentId) return;
      
      // Mark that we're fetching for this content ID
      fetchedRef.current[contentId] = true;
      
      setIsLoading(true);
      setError(null);
      
      try {
        console.log(`[StudyModeButtons] Fetching counts for ${studyType} ID: ${contentId}`);
        
        // Step 1: Get all card IDs matching the content (deck or study set)
        if (studyType === 'studySet') {
          const studySetQuery = { studySetId: contentId };
          const cardIdsResult = await resolveStudyQuery(studySetQuery);
          
          if (cardIdsResult.error || !cardIdsResult.data) {
            console.error(`Error fetching study set cards:`, cardIdsResult.error);
            setError(`Failed to check available cards`);
            setLearnCount(0);
            setReviewCount(0);
            return;
          }
          
          const cardIds = cardIdsResult.data;
          processCardIds(cardIds);
        } else {
          // For decks, use proper typing for tagLogic
          const deckQuery = { 
            criteria: { 
              deckId: contentId, 
              tagLogic: 'ANY' as const, // Use const assertion to fix type
              includeDifficult: false 
            } 
          };
          
          const cardIdsResult = await resolveStudyQuery(deckQuery);
          
          if (cardIdsResult.error || !cardIdsResult.data) {
            console.error(`Error fetching deck cards:`, cardIdsResult.error);
            setError(`Failed to check available cards`);
            setLearnCount(0);
            setReviewCount(0);
            return;
          }
          
          const cardIds = cardIdsResult.data;
          processCardIds(cardIds);
        }
      } catch (error) {
        console.error("Error fetching card counts:", error);
        setError("Error checking available cards");
        setLearnCount(0);
        setReviewCount(0);
      } finally {
        setIsLoading(false);
      }
    };
    
    // Helper function to process card IDs and update counts
    const processCardIds = async (cardIds: string[]) => {
      console.log(`[StudyModeButtons] Found ${cardIds.length} total cards`);
      
      if (cardIds.length === 0) {
        setLearnCount(0);
        setReviewCount(0);
        return;
      }
      
      // Step 2: Efficiently fetch only the SRS state fields for all cards in one request
      const srsStatesResult = await getCardSrsStatesByIds(cardIds);
      
      if (srsStatesResult.error || !srsStatesResult.data) {
        console.error(`Error fetching card SRS states:`, srsStatesResult.error);
        setError(`Failed to check card states`);
        setLearnCount(0);
        setReviewCount(0);
        return;
      }
      
      // Step 3: Filter and count locally based on SRS state
      const cardStates = srsStatesResult.data;
      const now = new Date();
      
      // Learn Mode: srs_level=0, learning_state=null or 'learning' (not 'relearning')
      const learnEligibleCards = cardStates.filter(card => 
        card.srs_level !== null && card.srs_level !== undefined && card.srs_level === 0 && 
        (card.learning_state === null || card.learning_state === 'learning')
      );
      
      // Review Mode: (srs_level>=1) OR (srs_level=0 and learning_state='relearning') AND is due
      const reviewEligibleCards = cardStates.filter(card => {
        // First check if card is graduated or in relearning
        const isGraduatedOrRelearning = 
          (card.srs_level !== null && card.srs_level !== undefined && card.srs_level >= 1) || 
          (card.srs_level === 0 && card.learning_state === 'relearning');
        
        // Then check if it's due
        const isDue = 
          card.next_review_due && 
          isValid(parseISO(card.next_review_due)) && 
          parseISO(card.next_review_due) <= now;
        
        return isGraduatedOrRelearning && isDue;
      });
      
      console.log(`[StudyModeButtons] Learn eligible: ${learnEligibleCards.length}, Review eligible: ${reviewEligibleCards.length}`);
      
      setLearnCount(learnEligibleCards.length);
      setReviewCount(reviewEligibleCards.length);
    };
    
    fetchCardCounts();
  }, [contentId, studyType, preCalculatedLearnCount, preCalculatedReviewCount, batchFetchInProgress]);
  
  const handleStartStudying = (mode: StudyMode) => {
    // Create the appropriate StudyInput based on type and mode
    let studyInput: StudyInput;
    
    if (studyType === 'studySet') {
      // For study sets, we pass studySetId and appropriate criteria for filtering
      studyInput = {
        studySetId: contentId,
        criteria: mode === 'learn' ? 
          {
            includeLearning: true,
            srsLevel: { operator: 'equals', value: 0 },
            tagLogic: 'ANY' as const,
            includeDifficult: false
          } : 
          {
            nextReviewDue: { operator: 'isDue' },
            srsLevel: { operator: 'greaterThan', value: 0 },
            tagLogic: 'ANY' as const,
            includeDifficult: false
          }
      };
    } else {
      // For decks, use the existing approach
      studyInput = {
        criteria: { 
          deckId: contentId, 
          tagLogic: 'ANY' as const, 
          includeDifficult: false,
          // Include special criteria for Learn mode
          ...(mode === 'learn' ? {
            srsLevel: { operator: 'equals', value: 0 },
            includeLearning: true
          } : {}),
          // Include special criteria for Review mode
          ...(mode === 'review' ? {
            nextReviewDue: { operator: 'isDue' },
            srsLevel: { operator: 'greaterThan', value: 0 }
          } : {})
        } 
      };
    }
    
    console.log(`[StudyModeButtons] Starting ${mode} mode with input:`, studyInput);
      
    // Verify counts for the selected mode
    if (mode === 'learn' && learnCount === 0) {
      toast.error("No cards available for learning in this selection.");
      return;
    }
    
    if (mode === 'review' && reviewCount === 0) {
      toast.error("No cards due for review in this selection.");
      return;
    }
    
    // Clear previous params BEFORE setting new ones
    clearStudyParameters();
    
    // Set parameters and navigate
    setStudyParameters(studyInput, mode);
    router.push('/study/session');
  };

  return (
    <div className={`flex gap-2 ${className}`}>
      {isLoading ? (
        <div className="flex items-center text-muted-foreground text-sm">
          <IconLoader className="w-3 h-3 mr-2 animate-spin" />
          Loading...
        </div>
      ) : (
        <>
          <Button
            variant="secondary"
            size={size}
            className="bg-rose-500 hover:bg-rose-600 text-white"
            onClick={() => handleStartStudying('learn')}
            disabled={learnCount === 0}
          >
            <GraduationCap className="h-4 w-4 mr-1" /> {learnLabel} {learnCount > 0 && `(${learnCount})`}
          </Button>
          
          <Button
            variant="secondary"
            size={size}
            className="bg-blue-500 hover:bg-blue-600 text-white"
            onClick={() => handleStartStudying('review')}
            disabled={reviewCount === 0}
          >
            <Play className="h-4 w-4 mr-1" /> {reviewLabel} {reviewCount > 0 && `(${reviewCount})`}
          </Button>
        </>
      )}
    </div>
  );
} 
=== study/StudySetSelector.tsx ===
'use client';

import React, { useState, useEffect, useCallback } from 'react';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { resolveStudyQuery } from '@/lib/actions/studyQueryActions';
import { getCardSrsStatesByIds } from '@/lib/actions/cardSrsActions';
import { useStudySessionStore, type StudyInput, type StudyMode } from '@/store/studySessionStore';
import { isValid, parseISO } from 'date-fns';
import { useRouter } from 'next/navigation';
import { toast } from 'sonner';
import { Loader2 as IconLoader, GraduationCap, Play } from 'lucide-react';
import type { Database, Tables } from "@/types/database";
import type { StudyQueryCriteria } from "@/lib/schema/study-query.schema";

// Type definitions
type DbDeck = Pick<Tables<'decks'>, 'id' | 'name'>;
type DbStudySet = Pick<Tables<'study_sets'>, 'id' | 'name'>;
type SrsCardState = Pick<Tables<'cards'>, 
  'id' | 'srs_level' | 'learning_state' | 'next_review_due' | 'learning_step_index' | 
  'failed_attempts_in_learn' | 'hard_attempts_in_learn'
>;

interface StudySetSelectorProps {
  decks: DbDeck[];
  studySets?: DbStudySet[];
  isLoadingStudySets?: boolean;
  onStartStudying: (actionInput: StudyInput, mode: StudyMode) => void;
}

type SelectionType = 'all' | 'deck' | 'studySet'; 

export function StudySetSelector({
  decks = [], 
  studySets = [],
  isLoadingStudySets = false,
  onStartStudying
}: StudySetSelectorProps) {
  const router = useRouter();
  
  // Selection state
  const [selectionType, setSelectionType] = useState<SelectionType>('all');
  const [selectedDeckId, setSelectedDeckId] = useState<string | undefined>(undefined); 
  const [selectedStudySetId, setSelectedStudySetId] = useState<string | undefined>(undefined); 
  const [selectedMode, setSelectedMode] = useState<StudyMode>('learn');
  
  // Card count state
  const [isLoadingCounts, setIsLoadingCounts] = useState<boolean>(false);
  const [learnCount, setLearnCount] = useState<number>(0);
  const [reviewCount, setReviewCount] = useState<number>(0);
  const [countError, setCountError] = useState<string | null>(null);

  // Get the current criteria based on user selection
  const getCurrentCriteria = useCallback((): StudyQueryCriteria | null => {
    if (selectionType === 'all') {
      return { 
        allCards: true,
        tagLogic: 'ANY',
        includeDifficult: false
      };
    } else if (selectionType === 'deck' && selectedDeckId) {
      return { 
        deckId: selectedDeckId,
        tagLogic: 'ANY',
        includeDifficult: false
      };
    } else if (selectionType === 'studySet' && selectedStudySetId) {
      // For study sets, we'll get the criteria from the backend
      return null; // Will use studySetId directly
    }
    return null;
  }, [selectionType, selectedDeckId, selectedStudySetId]);

  // Function to fetch card counts
  const fetchCardCounts = useCallback(async () => {
    const criteria = getCurrentCriteria();
    
    // Early return if no valid criteria (except for studySet which uses ID directly)
    if (!criteria && selectionType !== 'studySet') {
      setLearnCount(0);
      setReviewCount(0);
      return;
    }
    
    // Early return if study set is selected but no ID
    if (selectionType === 'studySet' && !selectedStudySetId) {
      setLearnCount(0);
      setReviewCount(0);
      return;
    }
    
    setIsLoadingCounts(true);
    setCountError(null);
    
    try {
      // Step 1: Get all card IDs matching the base criteria
      let cardIdsResult;
      
      if (selectionType === 'studySet') {
        cardIdsResult = await resolveStudyQuery({ studySetId: selectedStudySetId! });
      } else {
        cardIdsResult = await resolveStudyQuery({ criteria: criteria! });
      }
      
      if (cardIdsResult.error || !cardIdsResult.data) {
        console.error("Error fetching card IDs:", cardIdsResult.error);
        setCountError("Failed to check available cards");
        setLearnCount(0);
        setReviewCount(0);
        setIsLoadingCounts(false);
        return;
      }
      
      const cardIds = cardIdsResult.data;
      console.log(`[StudySetSelector] Found ${cardIds.length} total cards matching criteria`);
      
      if (cardIds.length === 0) {
        setLearnCount(0);
        setReviewCount(0);
        setIsLoadingCounts(false);
        return;
      }
      
      // Step 2: Get only the SRS state fields for the matched cards
      const srsStatesResult = await getCardSrsStatesByIds(cardIds);
      
      if (srsStatesResult.error || !srsStatesResult.data) {
        console.error("Error fetching card SRS states:", srsStatesResult.error);
        setCountError("Failed to check card states");
        setLearnCount(0);
        setReviewCount(0);
        setIsLoadingCounts(false);
        return;
      }
      
      const cardStates = srsStatesResult.data;
      
      // Step 3: Count cards for each mode based on SRS state
      // Learn Mode: srs_level=0, learning_state=null or 'learning' (not 'relearning')
      const learnEligibleCards = cardStates.filter(card => 
        card.srs_level !== null && card.srs_level !== undefined && card.srs_level === 0 && 
        (card.learning_state === null || card.learning_state === 'learning')
      );
      
      // Review Mode: (srs_level>=1) OR (srs_level=0 and learning_state='relearning') AND is due
      const now = new Date();
      const reviewEligibleCards = cardStates.filter(card => {
        // First check if card is graduated (srs_level >= 1) or in relearning
        const isGraduatedOrRelearning = 
          (card.srs_level !== null && card.srs_level !== undefined && card.srs_level >= 1) || 
          (card.srs_level === 0 && card.learning_state === 'relearning');
          
        // Then check if it's due (next_review_due <= now)
        const isDue = 
          card.next_review_due && 
          isValid(parseISO(card.next_review_due)) && 
          parseISO(card.next_review_due) <= now;
          
        return isGraduatedOrRelearning && isDue;
      });
      
      console.log(`[StudySetSelector] Learn-eligible: ${learnEligibleCards.length}, Review-eligible: ${reviewEligibleCards.length}`);
      
      // Update state
      setLearnCount(learnEligibleCards.length);
      setReviewCount(reviewEligibleCards.length);
      
    } catch (error) {
      console.error("Error in fetchCardCounts:", error);
      setCountError("Error checking available cards");
      setLearnCount(0);
      setReviewCount(0);
    } finally {
      setIsLoadingCounts(false);
    }
  }, [getCurrentCriteria, selectionType, selectedDeckId, selectedStudySetId]);

  // Fetch counts whenever selection changes
  useEffect(() => {
    fetchCardCounts();
  }, [selectionType, selectedDeckId, selectedStudySetId, fetchCardCounts]);

  // Start studying with the selected mode
  const handleStartStudying = () => {
    const criteria = getCurrentCriteria();
    
    // Create a study input appropriate for the selection
    let studyInput: StudyInput;
    
    if (selectionType === 'studySet' && selectedStudySetId) {
      studyInput = { studySetId: selectedStudySetId };
    } else if (criteria) {
      studyInput = { criteria };
    } else {
      toast.error("Please make a valid selection");
      return;
    }
    
    // Verify counts for the selected mode
    if (selectedMode === 'learn' && learnCount === 0) {
      toast.error("No cards available for learning in this selection.");
      return;
    }
    
    if (selectedMode === 'review' && reviewCount === 0) {
      toast.error("No cards due for review in this selection.");
      return;
    }
    
    // Start studying with the chosen input and mode
    onStartStudying(studyInput, selectedMode);
  };

  // Determine if the start button should be disabled
  const isStartDisabled = 
    (selectionType === 'deck' && !selectedDeckId) || 
    (selectionType === 'studySet' && !selectedStudySetId) ||
    (selectedMode === 'learn' && learnCount === 0) ||
    (selectedMode === 'review' && reviewCount === 0) ||
    isLoadingCounts;

  return (
    <div className="space-y-6 p-4 border rounded-lg bg-background/60">
      <h3 className="text-lg font-medium">Select Cards to Study</h3>

      <RadioGroup
        value={selectionType}
        onValueChange={(value) => {
          const newType = value as SelectionType;
          setSelectionType(newType);
          setSelectedDeckId(undefined);
          setSelectedStudySetId(undefined); 
        }}
        className="flex flex-wrap gap-4"
      >
         <div className="flex items-center space-x-2">
          <RadioGroupItem value="all" id="r-all" />
          <Label htmlFor="r-all">All My Cards</Label>
        </div>
        <div className="flex items-center space-x-2">
          <RadioGroupItem value="deck" id="r-deck" />
          <Label htmlFor="r-deck">From a Deck</Label>
        </div>
         <div className="flex items-center space-x-2">
          <RadioGroupItem value="studySet" id="r-studySet" disabled={isLoadingStudySets} />
          <Label htmlFor="r-studySet" className={isLoadingStudySets ? "text-muted-foreground" : ""}>
            Smart Playlist {isLoadingStudySets ? "(Loading...)" : ""}
          </Label>
        </div>
      </RadioGroup>

      {selectionType === 'deck' && (
         <div className="space-y-2 mt-4"> 
          <Label htmlFor="deck-select">Choose deck</Label>
          <Select value={selectedDeckId} onValueChange={setSelectedDeckId}>
            <SelectTrigger id="deck-select" className="w-full sm:w-[280px]"><SelectValue placeholder="Select a deck..." /></SelectTrigger>
            <SelectContent>
              {decks.length > 0 ? (
                decks.map((deck) => (
                  <SelectItem key={deck.id} value={deck.id}>{deck.name as string}</SelectItem>
                ))
              ) : (
                <SelectItem value="no-decks" disabled>No decks available</SelectItem>
              )}
            </SelectContent>
          </Select>
        </div>
      )}
      
       {selectionType === 'studySet' && (
         <div className="space-y-2 mt-4"> 
          <Label htmlFor="study-set-select">Choose playlist</Label>
          <Select
            value={selectedStudySetId}
            onValueChange={setSelectedStudySetId}
            disabled={isLoadingStudySets}
          >
            <SelectTrigger id="study-set-select" className="w-full sm:w-[280px]">
              <SelectValue placeholder="Select a smart playlist..." />
            </SelectTrigger>
            <SelectContent>
              {isLoadingStudySets ? (
                  <SelectItem value="loading" disabled>Loading playlists...</SelectItem>
              ) : studySets.length > 0 ? (
                studySets.map((set) => (
                  <SelectItem key={set.id} value={set.id}>
                    {set.name as string}
                  </SelectItem>
                ))
              ) : (
                <SelectItem value="no-sets" disabled>No smart playlists saved</SelectItem>
              )}
            </SelectContent>
          </Select>
        </div>
      )}

      {/* Error display */}
      {countError && (
        <div className="text-destructive text-sm">
          {countError}
        </div>
      )}

      {/* Loading indicator */}
      {isLoadingCounts && (
        <div className="flex items-center text-muted-foreground text-sm">
          <IconLoader className="w-3 h-3 mr-2 animate-spin" />
          Checking available cards...
        </div>
      )}

      <hr />

      <div className="space-y-4">
        <Label>Choose Study Mode</Label>
        <RadioGroup
          value={selectedMode}
          onValueChange={(value) => setSelectedMode(value as StudyMode)}
          className="flex space-x-6"
        >
           <div className="flex items-center space-x-2">
            <RadioGroupItem value="learn" id="m-learn" disabled={learnCount === 0 || isLoadingCounts} />
            <Label 
              htmlFor="m-learn" 
              className={learnCount === 0 || isLoadingCounts ? "text-muted-foreground" : ""}
            >
              Learn {!isLoadingCounts && learnCount > 0 && `(${learnCount})`}
            </Label>
          </div>
          <div className="flex items-center space-x-2">
            <RadioGroupItem value="review" id="m-review" disabled={reviewCount === 0 || isLoadingCounts} />
            <Label 
              htmlFor="m-review" 
              className={reviewCount === 0 || isLoadingCounts ? "text-muted-foreground" : ""}
            >
              Review (SRS) {!isLoadingCounts && reviewCount > 0 && `(${reviewCount})`}
            </Label>
          </div>
        </RadioGroup>
        <p className="text-sm text-muted-foreground">
          {selectedMode === 'learn'
            ? "Reviews all selected cards, repeating until learned in this session."
            : "Reviews only cards that are due based on Spaced Repetition."
          }
        </p>
      </div>

      <div className="flex justify-center pt-2">
        <Button
          onClick={handleStartStudying}
          disabled={isStartDisabled} 
          className="w-full sm:w-auto"
          size="lg"
        >
          {isLoadingCounts ? (
            <>
              <IconLoader className="mr-2 h-4 w-4 animate-spin" /> 
              Checking cards...
            </>
          ) : selectedMode === 'learn' ? (
            <>
              <GraduationCap className="mr-2 h-5 w-5" /> 
              Start Learning {learnCount > 0 && `(${learnCount})`}
            </>
          ) : (
            <>
              <Play className="mr-2 h-5 w-5" /> 
              Start Reviewing {reviewCount > 0 && `(${reviewCount})`}
            </>
          )}
        </Button>
      </div>
    </div>
  );
} 
=== study/StudySelectClient.tsx ===
"use client";

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { StudySetSelector } from '@/components/study/StudySetSelector';
import { useStudySessionStore } from '@/store/studySessionStore';
import type { StudyInput, StudyMode } from '@/store/studySessionStore';
import { toast } from 'sonner';
import type { Tables } from '@/types/database';

// Define types using Tables helper
type Deck = Tables<'decks'> & {
  new_count: number;
  learning_count: number;
  young_count: number;
  mature_count: number;
};

type StudySet = Tables<'study_sets'>;

interface StudySelectClientProps {
  initialDecks: Deck[];
  initialStudySets: StudySet[];
  hasErrors: boolean;
}

export function StudySelectClient({ 
  initialDecks, 
  initialStudySets, 
  hasErrors 
}: StudySelectClientProps) {
  const router = useRouter();
  const { setStudyParameters } = useStudySessionStore();
  const [error] = useState<string | null>(hasErrors ? 'There was an issue loading some data' : null);

  // Handle starting a study session
  const handleStartStudying = async (studyInput: StudyInput, mode: StudyMode) => {
    try {
      // Initialize the study session in the store
      setStudyParameters(studyInput, mode);
      
      // Navigate to the study session page
      router.push('/study/session');
    } catch (error) {
      console.error('Error starting study session:', error);
      toast.error('Failed to start study session');
    }
  };

  return (
    <>
      {error && (
        <div className="mt-6 mb-6 p-4 border border-destructive/50 rounded-lg bg-destructive/10 text-destructive">
          {error}
        </div>
      )}
      
      <StudySetSelector 
        decks={initialDecks}
        studySets={initialStudySets}
        isLoadingStudySets={false}
        onStartStudying={handleStartStudying}
      />
    </>
  );
} 
=== deck-tag-editor.tsx ===
"use client";

import React, { useMemo, useState } from 'react';
import type { Tables } from '@/types/database';
import { useTags } from '@/hooks/useTags'; // Assuming this hook exists
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { X as IconX, Tag as IconTag, Check, ChevronsUpDown } from 'lucide-react';
import {
    Popover,
    PopoverContent,
    PopoverTrigger,
} from "@/components/ui/popover"
import {
    Command,
    CommandEmpty,
    CommandGroup,
    CommandInput,
    CommandItem,
    CommandList,
} from "@/components/ui/command"
import { cn } from '@/lib/utils'; // Import cn for conditional classes

// Define the expected props
interface DeckTagEditorProps {
    deckId: string;
    currentTags: Tables<'tags'>[]; // Tags currently on the deck
    onAddTag: (tagId: string) => Promise<void>; // Async to allow for loading state if needed
    onRemoveTag: (tagId: string) => Promise<void>; // Async
    disabled?: boolean; // Optional prop to disable interaction
}

// Type alias for Tag object
type DbTag = Tables<'tags'>;
// Type alias for Combobox options
type TagOption = { value: string; label: string };

export function DeckTagEditor({
    deckId,
    currentTags,
    onAddTag,
    onRemoveTag,
    disabled = false
}: DeckTagEditorProps) {
    // Fetch all available tags for the user
    const { allTags: allUserTags, isLoading: tagsLoading } = useTags();
    const [isAdding, setIsAdding] = useState(false);
    const [isRemoving, setIsRemoving] = useState<string | null>(null); // Store ID of tag being removed
    const [popoverOpen, setPopoverOpen] = useState(false); // State for Popover

    // Prepare options for the Combobox: Filter out tags already on the deck
    const availableTagOptions: TagOption[] = useMemo(() => {
        const currentTagIds = new Set(currentTags.map(tag => tag.id));
        return (allUserTags || [])
            .filter((tag: DbTag) => !currentTagIds.has(tag.id))
            .map((tag: DbTag) => ({ value: tag.id, label: tag.name }))
            .sort((a: TagOption, b: TagOption) => a.label.localeCompare(b.label));
    }, [allUserTags, currentTags]);

    const handleSelectTag = async (tagId: string | null) => {
        if (!tagId || disabled) return;
        setPopoverOpen(false); // Close popover on selection
        setIsAdding(true);
        try {
            await onAddTag(tagId);
        } catch (error) {
            // Error handled by the hook/action via toast
            console.error("Error adding tag:", error);
        } finally {
            setIsAdding(false);
        }
    };

    const handleRemoveClick = async (tagId: string) => {
        if (disabled) return;
        setIsRemoving(tagId);
        try {
            await onRemoveTag(tagId);
        } catch (error) {
            console.error("Error removing tag:", error);
        } finally {
            setIsRemoving(null);
        }
    };

    return (
        <div className="space-y-3">
            <p className="text-sm font-medium flex items-center">
                <IconTag className="h-4 w-4 mr-2 opacity-80" /> Deck Tags
            </p>
            {/* Display Current Tags as Badges */}
            <div className="flex flex-wrap gap-2">
                {currentTags.length === 0 && <p className="text-xs text-muted-foreground">No tags added yet.</p>}
                {currentTags.map((tag) => (
                    <Badge key={tag.id} variant="secondary" className="pl-2 pr-1 text-sm">
                        {tag.name}
                        <Button
                            variant="ghost"
                            size="icon"
                            className="ml-1 h-4 w-4 p-0 text-muted-foreground hover:text-destructive hover:bg-transparent disabled:opacity-50"
                            onClick={() => handleRemoveClick(tag.id)}
                            disabled={disabled || isRemoving === tag.id}
                            aria-label={`Remove tag ${tag.name}`}
                        >
                            <IconX className="h-3 w-3" />
                        </Button>
                    </Badge>
                ))}
            </div>

            {/* --- Add Tag Combobox using Popover/Command --- */}
            <div className="max-w-xs"> 
                <Popover open={popoverOpen} onOpenChange={setPopoverOpen}>
                    <PopoverTrigger asChild>
                        <Button
                            variant="outline"
                            role="combobox"
                            aria-expanded={popoverOpen}
                            className="w-full justify-between h-9 text-muted-foreground font-normal text-xs"
                            disabled={disabled || tagsLoading || isAdding}
                        >
                            {isAdding ? "Adding..." : "Add a tag..."}
                            <ChevronsUpDown className="ml-2 h-3 w-3 shrink-0 opacity-50" />
                        </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-[--radix-popover-trigger-width] max-h-[--radix-popover-content-available-height] p-0">
                        <Command shouldFilter={true}>
                            <CommandInput placeholder="Search tags..." className="h-8 text-xs" />
                            <CommandList>
                                <CommandEmpty>No matching tags found.</CommandEmpty>
                                <CommandGroup>
                                    {availableTagOptions.map((option) => (
                                        <CommandItem
                                            key={option.value}
                                            value={option.label} // Use label for filtering/display
                                            onSelect={(currentLabel) => {
                                                // Find the option by label to get the value (tagId)
                                                const selectedOption = availableTagOptions.find(opt => opt.label.toLowerCase() === currentLabel.toLowerCase());
                                                handleSelectTag(selectedOption ? selectedOption.value : null);
                                            }}
                                            className="text-xs"
                                        >
                                            {/* Checkmark logic can be added here if needed, though less common for add-only */} 
                                            {option.label}
                                        </CommandItem>
                                    ))}
                                </CommandGroup>
                            </CommandList>
                        </Command>
                    </PopoverContent>
                </Popover>
                {/* Consider adding a link/button to manage all tags (e.g., navigate to /tags) */} 
            </div>
            {/* ----------------------------------------------- */}
        </div>
    );
} 
=== study-session.tsx ===
/**
 * Study session component that manages the overall study experience.
 * 
 * This component orchestrates the study session by:
 * - Managing the current card and session state
 * - Handling card progression and review scheduling
 * - Providing study controls and progress tracking
 * - Integrating with the spaced repetition system
 * 
 * @component
 * @param {Object} props - Component props
 * @param {Card[]} props.cards - Array of cards to study
 * @param {() => void} props.onComplete - Callback when the study session is completed
 * @param {(cardId: string, rating: number) => void} props.onRateCard - Callback for rating a card
 * @returns {JSX.Element} The complete study session interface
 */

import type { Tables } from '@/types/database';

// Define the card type from database schema
type Card = Tables<'cards'>;

export function StudySession({
  cards,
  onComplete,
  onRateCard,
}: {
  cards: Card[];
  onComplete: () => void;
  onRateCard: (cardId: string, rating: number) => void;
}) {
// ... existing code ...
} 
=== ClientProviders.tsx ===
/**
 * Client-side providers wrapper component.
 * 
 * This component groups all client-side context providers required by the application:
 * - ThemeProvider: Manages light/dark theme state
 * - AuthProvider: Handles authentication state and user session
 * - SettingsProvider: Manages user preferences and settings
 * - SonnerToaster: Provides toast notifications
 * 
 * @component
 * @param {Object} props - Component props
 * @param {React.ReactNode} props.children - Child components to be wrapped by providers
 * @returns {JSX.Element} Wrapped children with all necessary providers
 */

'use client'; // This component uses client-side features (Context)

import React from 'react';
import { ThemeProvider } from "@/components/theme-provider";
import { Toaster as SonnerToaster } from "sonner";
import { AuthProvider } from "@/hooks/use-auth";
import { SettingsProvider } from "@/providers/settings-provider";
import { SpeedInsights } from "@vercel/speed-insights/next";

interface ClientProvidersProps {
  children: React.ReactNode;
}

/**
 * Wraps the main application content with client-side context providers.
 */
export function ClientProviders({ children }: ClientProvidersProps) {
  return (
    <ThemeProvider 
        attribute="class" 
        defaultTheme="system" 
        enableSystem 
        disableTransitionOnChange
    >
      <AuthProvider>
        <SettingsProvider>
          {children}
          <SonnerToaster richColors closeButton />
          <SpeedInsights />
        </SettingsProvider>
      </AuthProvider>
    </ThemeProvider>
  );
} 
=== card-editor.tsx ===
"use client"

import type React from "react"
import { useState, useEffect, useCallback } from "react"
import { Card, CardContent, CardFooter } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Trash2, Save, Loader2 as IconLoader } from "lucide-react"
import type { Tables } from "@/types/database"
import { debounce } from "@/lib/utils"
import { toast } from "sonner"
import { cn } from "@/lib/utils"

const POS_OPTIONS: ReadonlyArray<string> = ['Noun', 'Verb', 'Adjective', 'Adverb', 'Pronoun', 'Preposition', 'Interjection', 'Other', 'N/A'];
const GENDER_OPTIONS = [
    { value: 'Male', label: 'Male'},
    { value: 'Female', label: 'Female'},
    { value: 'Default', label: 'Neutral / Other'}
];
const GENDERED_POS: ReadonlyArray<string> = ['Noun', 'Adjective', 'Pronoun'] as const;

const DEBOUNCE_WAIT_MS = 500;

type DbCard = Tables<'cards'>;
type CardDataInput = Pick<DbCard, 'question' | 'answer' | 'question_part_of_speech' | 'question_gender' | 'answer_part_of_speech' | 'answer_gender'>;

interface CardEditorProps {
  card: Partial<DbCard> | null
  onUpdate: (id: string, data: Partial<CardDataInput>) => void
  onDelete: (id: string) => void
  onCreate?: (data: CardDataInput) => Promise<string | null>
}

export function CardEditor({ card, onUpdate, onDelete, onCreate }: CardEditorProps) {
  const [internalQuestion, setInternalQuestion] = useState(card?.question || '')
  const [internalAnswer, setInternalAnswer] = useState(card?.answer || '')
  const [internalQuestionPos, setInternalQuestionPos] = useState(card?.question_part_of_speech || 'N/A')
  const [internalQuestionGender, setInternalQuestionGender] = useState(card?.question_gender || 'Default')
  const [internalAnswerPos, setInternalAnswerPos] = useState(card?.answer_part_of_speech || 'N/A')
  const [internalAnswerGender, setInternalAnswerGender] = useState(card?.answer_gender || 'Default')
  const [isSavingNew, setIsSavingNew] = useState(false)
  const isExistingCard = !!card?.id && !card.id.startsWith('new-');

  useEffect(() => {
    setInternalQuestion(card?.question || '')
    setInternalAnswer(card?.answer || '')
    setInternalQuestionPos(card?.question_part_of_speech || 'N/A')
    setInternalQuestionGender(card?.question_gender || 'Default')
    setInternalAnswerPos(card?.answer_part_of_speech || 'N/A')
    setInternalAnswerGender(card?.answer_gender || 'Default')
    setIsSavingNew(false)
  }, [card]);

  const debouncedOnUpdate = useCallback(
    debounce((data: Partial<CardDataInput>) => {
      if (isExistingCard && card?.id) {
        console.log('[CardEditor] Debounced update triggered for ID:', card.id, 'Data:', data);
        onUpdate(card.id, data)
      }
    }, DEBOUNCE_WAIT_MS),
    [onUpdate, card?.id, isExistingCard]
  );

  const handleTextChange = (field: 'question' | 'answer', value: string) => {
    console.log(`[CardEditor] handleTextChange - Field: ${field}, Value: ${value.substring(0, 20)}...`);
    const updates: Partial<CardDataInput> = {};
    if (field === 'question') {
      setInternalQuestion(value);
      updates.question = value;
      updates.answer = internalAnswer;
    } else {
      setInternalAnswer(value);
      updates.answer = value;
      updates.question = internalQuestion;
    }
    updates.question_part_of_speech = internalQuestionPos === 'N/A' ? null : internalQuestionPos;
    updates.question_gender = internalQuestionGender === 'Default' ? null : internalQuestionGender;
    updates.answer_part_of_speech = internalAnswerPos === 'N/A' ? null : internalAnswerPos;
    updates.answer_gender = internalAnswerGender === 'Default' ? null : internalAnswerGender;

    if (isExistingCard) {
        console.log(`[CardEditor] handleTextChange - Queuing debounced update for ID: ${card?.id}`);
        debouncedOnUpdate(updates);
    }
  }

  const handleClassificationChange = (field: 'question_part_of_speech' | 'question_gender' | 'answer_part_of_speech' | 'answer_gender', value: string | null) => {
    const updates: Partial<CardDataInput> = {
        question: internalQuestion,
        answer: internalAnswer,
        question_part_of_speech: internalQuestionPos === 'N/A' ? null : internalQuestionPos,
        question_gender: internalQuestionGender === 'Default' ? null : internalQuestionGender,
        answer_part_of_speech: internalAnswerPos === 'N/A' ? null : internalAnswerPos,
        answer_gender: internalAnswerGender === 'Default' ? null : internalAnswerGender,
    };

    if (field === 'question_part_of_speech') {
      const newPos = value || 'N/A';
      setInternalQuestionPos(newPos);
      updates.question_part_of_speech = newPos === 'N/A' ? null : newPos;
      if (!GENDERED_POS.includes(newPos)) {
        setInternalQuestionGender('Default');
        updates.question_gender = null;
      }
    } else if (field === 'question_gender') {
      const newGender = value || 'Default';
      setInternalQuestionGender(newGender);
      updates.question_gender = newGender === 'Default' ? null : newGender;
    } else if (field === 'answer_part_of_speech') {
      const newPos = value || 'N/A';
      setInternalAnswerPos(newPos);
      updates.answer_part_of_speech = newPos === 'N/A' ? null : newPos;
      if (!GENDERED_POS.includes(newPos)) {
        setInternalAnswerGender('Default');
        updates.answer_gender = null;
      }
    } else if (field === 'answer_gender') {
      const newGender = value || 'Default';
      setInternalAnswerGender(newGender);
      updates.answer_gender = newGender === 'Default' ? null : newGender;
    }

    if (isExistingCard) {
      debouncedOnUpdate(updates);
    }
  }

  const handleDelete = () => {
    if (isExistingCard && card?.id) {
        onDelete(card.id);
    } else if (!isExistingCard && card?.id) {
        onDelete(card.id);
    }
  }

  const handleCreate = async () => {
      if (!onCreate) {
          console.error("onCreate prop is missing from CardEditor for a new card.");
          toast.error("Cannot save new card: Configuration error.");
          return;
      }

      const question = internalQuestion.trim();
      const answer = internalAnswer.trim();
      if (!question || !answer) {
          toast.error("Question and Answer content cannot be empty.");
          return;
      }

      const cardData: CardDataInput = {
          question: question,
          answer: answer,
          question_part_of_speech: internalQuestionPos === 'N/A' ? null : internalQuestionPos,
          question_gender: internalQuestionGender === 'Default' ? null : internalQuestionGender,
          answer_part_of_speech: internalAnswerPos === 'N/A' ? null : internalAnswerPos,
          answer_gender: internalAnswerGender === 'Default' ? null : internalAnswerGender,
      }

      setIsSavingNew(true);
      try {
         await onCreate(cardData);
      } catch (error) {
          console.error("Error calling onCreate prop:", error);
      } finally {
           setIsSavingNew(false);
      }
  };

  const cardIdSuffix = card?.id || 'new';

  return (
    <Card className={cn(
      "relative",
      !isExistingCard && card?.id?.startsWith('new-') ? "border-primary border-2 shadow-lg shadow-primary/20" : ""
    )}>
       {(isExistingCard || card?.id?.startsWith('new-')) && card?.id && (
          <Button
            variant="ghost"
            size="icon"
            onClick={handleDelete}
            aria-label="Delete card"
            className="absolute top-2 right-2 h-7 w-7 text-muted-foreground hover:text-destructive hover:bg-destructive/10 z-10"
          >
              <Trash2 className="h-4 w-4" />
          </Button>
       )}

      <CardContent className="p-4 space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="space-y-2">
            <Label htmlFor={`question-${cardIdSuffix}`} className="block text-sm font-medium">Question</Label>
            <Textarea
              id={`question-${cardIdSuffix}`}
              placeholder="Enter question..."
              value={internalQuestion}
              onChange={(e) => handleTextChange('question', e.target.value)}
              className="min-h-[100px]"
              aria-label="Question content"
            />
            <div className="grid grid-cols-2 gap-x-4 gap-y-2 pt-2">
              <div>
                <Label htmlFor={`q-pos-${cardIdSuffix}`} className="text-xs text-muted-foreground">Type</Label>
                <Select
                  value={internalQuestionPos}
                  onValueChange={(value) => handleClassificationChange('question_part_of_speech', value)}
                  name={`q-pos-${cardIdSuffix}`}
                >
                  <SelectTrigger id={`q-pos-${cardIdSuffix}`} className="h-9 text-xs">
                    <SelectValue placeholder="Select PoS..." />
                  </SelectTrigger>
                  <SelectContent>
                    {POS_OPTIONS.map(pos => <SelectItem key={pos} value={pos} className="text-xs">{pos}</SelectItem>)}
                  </SelectContent>
                </Select>
              </div>
              <div>
                {GENDERED_POS.includes(internalQuestionPos) && (
                  <>
                    <Label htmlFor={`q-gender-${cardIdSuffix}`} className="text-xs text-muted-foreground">Gender</Label>
                    <Select
                      value={internalQuestionGender}
                      onValueChange={(value) => handleClassificationChange('question_gender', value)}
                      name={`q-gender-${cardIdSuffix}`}
                    >
                      <SelectTrigger id={`q-gender-${cardIdSuffix}`} className="h-9 text-xs">
                         <SelectValue placeholder="Select Gender..." />
                      </SelectTrigger>
                      <SelectContent>
                        {GENDER_OPTIONS.map(opt => <SelectItem key={opt.value} value={opt.value} className="text-xs">{opt.label}</SelectItem>)}
                      </SelectContent>
                    </Select>
                  </>
                )}
              </div>
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor={`answer-${cardIdSuffix}`} className="block text-sm font-medium">Answer</Label>
            <Textarea
              id={`answer-${cardIdSuffix}`}
              placeholder="Enter answer..."
              value={internalAnswer}
              onChange={(e) => handleTextChange('answer', e.target.value)}
              className="min-h-[100px]"
              aria-label="Answer content"
            />
            <div className="grid grid-cols-2 gap-x-4 gap-y-2 pt-2">
              <div>
                <Label htmlFor={`a-pos-${cardIdSuffix}`} className="text-xs text-muted-foreground">Type</Label>
                <Select
                  value={internalAnswerPos}
                  onValueChange={(value) => handleClassificationChange('answer_part_of_speech', value)}
                  name={`a-pos-${cardIdSuffix}`}
                >
                  <SelectTrigger id={`a-pos-${cardIdSuffix}`} className="h-9 text-xs">
                    <SelectValue placeholder="Select PoS..." />
                  </SelectTrigger>
                  <SelectContent>
                    {POS_OPTIONS.map(pos => <SelectItem key={pos} value={pos} className="text-xs">{pos}</SelectItem>)}
                  </SelectContent>
                </Select>
              </div>
              <div>
                {GENDERED_POS.includes(internalAnswerPos) && (
                  <>
                    <Label htmlFor={`a-gender-${cardIdSuffix}`} className="text-xs text-muted-foreground">Gender</Label>
                    <Select
                      value={internalAnswerGender}
                      onValueChange={(value) => handleClassificationChange('answer_gender', value)}
                      name={`a-gender-${cardIdSuffix}`}
                    >
                      <SelectTrigger id={`a-gender-${cardIdSuffix}`} className="h-9 text-xs">
                         <SelectValue placeholder="Select Gender..." />
                      </SelectTrigger>
                      <SelectContent>
                        {GENDER_OPTIONS.map(opt => <SelectItem key={opt.value} value={opt.value} className="text-xs">{opt.label}</SelectItem>)}
                      </SelectContent>
                    </Select>
                  </>
                )}
              </div>
            </div>
          </div>
        </div>
      </CardContent>

      {!isExistingCard && onCreate && (
        <CardFooter className="flex justify-end p-3 bg-muted/50 border-t">
           <Button onClick={handleCreate} disabled={isSavingNew || !internalQuestion.trim() || !internalAnswer.trim()} size="sm">
              {isSavingNew ? <IconLoader className="h-4 w-4 animate-spin mr-2"/> : <Save className="h-4 w-4 mr-2" />} Save New Card
           </Button>
        </CardFooter>
      )}
    </Card>
  )
}


=== study-flashcard-view.tsx ===
"use client";

// --- Add useMemo import ---
import React, { useEffect, useState, useMemo } from "react";
// -------------------------
import { cn } from "@/lib/utils";
import type { Database, Tables } from "@/types/database";
type DbCard = Tables<'cards'>;
// --- Import Settings AND Palette types/data ---
import type { Settings } from "@/providers/settings-provider";
// Assuming palettes are defined in lib/palettes.ts or provider, adjust path:
import {
    PREDEFINED_PALETTES,
    DEFAULT_PALETTE_CONFIG,
    DARK_MODE_CARD_BG
} from "@/lib/palettes";
import type { Palette, ColorPair } from "@/lib/palettes";
// ------------------------------------------
// --- Import useTheme ---
import { useTheme } from "next-themes";
// ---------------------
import { Card, CardContent, CardFooter, CardHeader } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { ThumbsDown, ThumbsUp, Volume2, ChevronsDown, ChevronsUp } from "lucide-react"; // Keep original imports
import { getFontClass } from "@/lib/fonts";
import { useTTS } from "@/hooks/use-tts";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";

type ReviewGrade = 1 | 2 | 3 | 4;

interface StudyFlashcardViewProps {
  card: DbCard | null;
  isFlipped: boolean;
  isTransitioning: boolean;
  onFlip: () => void;
  onAnswer: (grade: ReviewGrade) => void;
  settings: Settings | null; // Now includes palette config and enable flags
  progressText?: string;
}


// --- UPDATED Helper function ---
function getWordStyles(
    pos: string | null | undefined,
    gender: string | null | undefined,
    textLanguageCode: string | undefined, // NEW: Language of the text itself
    settings: Settings | null,
    theme: string | undefined // 'light' | 'dark' | 'system'
): React.CSSProperties {
    const defaultStyle = {};
    if (!pos || pos === 'N/A' || !settings || !textLanguageCode) {
        return defaultStyle; // Cannot style without info
    }

    // --- NEW: Check if coloring should be skipped based on native language setting ---
    console.debug('[getWordStyles] Checking native language:', {
        colorOnlyNonNative: settings.colorOnlyNonNative,
        appLanguage: settings.appLanguage,
        textLanguageCode: textLanguageCode,
        shouldSkip: settings.colorOnlyNonNative && settings.appLanguage === textLanguageCode
    });
    if (settings.colorOnlyNonNative && settings.appLanguage === textLanguageCode) {
        console.debug(`[getWordStyles] Skipping color for native language (${textLanguageCode}) word.`);
        return defaultStyle; // Skip styling if it's the native language and setting is ON
    }
    // ---------------------------------------------------------------------------------

    const posKey = pos;
    const isBasicPos = ['Noun', 'Verb'].includes(posKey);
    const isEnabled = isBasicPos ? settings.enableBasicColorCoding : settings.enableAdvancedColorCoding;
    if (!isEnabled) { return defaultStyle; } // Styling not enabled for this PoS type

    const effectiveTheme = theme === 'dark' ? 'dark' : 'light';
    // Use paletteConfig from settings
    const paletteConfig = settings.wordPaletteConfig ?? DEFAULT_PALETTE_CONFIG;
    const genderKey = (gender && gender !== 'N/A' && paletteConfig?.[posKey]?.[gender]) ? gender : 'Default';
    const paletteId = paletteConfig?.[posKey]?.[genderKey] ?? 'default';

    if (paletteId === 'default') { return defaultStyle; }

    const selectedPalette = PREDEFINED_PALETTES.find(p => p.id === paletteId);
    if (!selectedPalette) { return defaultStyle; }

    const colorPair = selectedPalette[effectiveTheme];
    if (colorPair && colorPair.background !== 'transparent' && colorPair.text !== 'inherit') {
        return {
            backgroundColor: colorPair.background,
            color: colorPair.text,
        };
    }
    return defaultStyle;
}
// -----------------------------


export function StudyFlashcardView({
  card,
  isFlipped,
  isTransitioning,
  onFlip,
  onAnswer,
  settings,
  progressText,
}: StudyFlashcardViewProps) {

  const { speak } = useTTS({});
  const [isSpeaking, setIsSpeaking] = useState(false);
  // --- Get current theme ---
  const { theme } = useTheme();
  // -------------------------

  // --- Calculate styles using useMemo, passing text language ---
  const cardStyles = useMemo(() => {
      const defaultStyles = { questionStyle: {}, answerStyle: {}, cardRequiresDarkBg: false };
      if (!card || !settings) {
          return defaultStyles;
      }

      // --- Get language codes from the card's associated deck data ---
      // Assumes card includes decks relation: cards(..., decks(primary_language, secondary_language))
      // Use lowercase language codes ('en', 'fr', etc.) for comparison
      // TODO: Ensure card.decks is correctly typed and fetched
      // @ts-ignore - Assuming card.decks exists for now
      const questionLangCode = card.decks?.primary_language?.toLowerCase();
      // @ts-ignore - Assuming card.decks exists for now
      const answerLangCode = card.decks?.secondary_language?.toLowerCase();
      // -------------------------------------------------------------

      // Use correct snake_case field names from DbCard type
      const qStyle = getWordStyles(card.question_part_of_speech, card.question_gender, questionLangCode, settings, theme);
      const aStyle = getWordStyles(card.answer_part_of_speech, card.answer_gender, answerLangCode, settings, theme);

      // Dark mode background logic (needs slight adjustment)
      // Apply dark BG if dark theme AND (basic or advanced is enabled)
      // This prevents flickering if one side is native but the other isn't.
      const isAnyColoringEnabled = settings.enableBasicColorCoding || settings.enableAdvancedColorCoding;
      // Only require dark bg if styles actually applied and a relevant setting is enabled
      const cardRequiresDarkBg = theme === 'dark' && isAnyColoringEnabled && (Object.keys(qStyle).length > 0 || Object.keys(aStyle).length > 0);


      return {
          questionStyle: qStyle,
          answerStyle: aStyle,
          cardRequiresDarkBg: cardRequiresDarkBg
      };
  }, [card, settings, theme]); // Add theme dependency
  // ----------------------------------------------------

  if (!card) { return ( <Card className="w-full max-w-2xl h-80 flex items-center justify-center"><p className="text-muted-foreground">Loading card...</p></Card> ); }

  const fontClass = getFontClass(settings?.cardFont);

  // handleSpeak function (Original logic kept)
  const handleSpeak = async (text: string | null | undefined, defaultLang: string) => {
    if (!settings?.ttsEnabled || !text || isSpeaking) return;
    setIsSpeaking(true);
    try { await speak(text, defaultLang); }
    catch (error) { console.error("TTS Error:", error); }
    finally { setIsSpeaking(false); }
  };

  // Language determination (Original logic kept)
  const questionLang = settings?.appLanguage ? (settings.languageDialects?.[settings.appLanguage as keyof typeof settings.languageDialects] || 'en-US') : 'en-US';
  const answerLang = questionLang;

  // useEffect for keypress (Original logic kept)
  useEffect(() => {
    const handleKeyPress = (e: KeyboardEvent) => {
        if (isTransitioning) return;
        if (e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement) return;
        if (!isFlipped) {
            if (e.key === ' ' || e.key === 'Enter') onFlip();
            else if ((e.key === 'p' || e.key === 't') && !isSpeaking) handleSpeak(card.question, questionLang);
        } else {
            const grade = parseInt(e.key);
            if (grade >= 1 && grade <= 4) onAnswer(grade as ReviewGrade);
            else if ((e.key === 'p' || e.key === 't') && !isSpeaking) handleSpeak(card.answer, answerLang);
        }
    };
    window.addEventListener('keydown', handleKeyPress);
    return () => window.removeEventListener('keydown', handleKeyPress);
  }, [isFlipped, isTransitioning, onAnswer, onFlip, card?.id, card?.question, card?.answer, questionLang, answerLang, isSpeaking, speak, settings]); // Keep original deps + settings

  // --- Conditionally apply dark mode background to card ---
  const cardDarkBgStyle: React.CSSProperties = cardStyles.cardRequiresDarkBg ? { backgroundColor: DARK_MODE_CARD_BG } : {};
  // -------------------------------------------------------

  return (
    <div className="w-full max-w-2xl mx-auto">
      <div
        className={`flip-card ${isFlipped ? "flipped" : ""} w-full h-80 cursor-pointer`}
        onClick={onFlip}
        role="button"
        aria-label={isFlipped ? "Flip to question" : "Flip to answer"}
        tabIndex={0}
      >
        <div className="flip-card-inner relative w-full h-full">
          {/* Front Side */}
          <div className="flip-card-front absolute w-full h-full">
            {/* Apply card background style */}
            <Card className={cn("w-full h-full flex flex-col flashcard-border", fontClass)} style={cardDarkBgStyle}>
              <CardHeader className="text-xs text-muted-foreground bg-muted/50 border-b py-2 px-4">
                 <div className="flex justify-between items-center"> <span>{progressText || '\u00A0'}</span> </div>
              </CardHeader>
              <CardContent className="p-6 text-center relative overflow-auto flex-grow flex items-center justify-center">
                 {/* Apply text style and classes to existing <p> */}
                <p className="text-xl md:text-2xl text-foreground inline-block px-2 py-1 rounded transition-colors duration-200" style={cardStyles.questionStyle}> {card.question} </p>
                {/* Original TTS Button */}
                {settings?.ttsEnabled && card.question && ( <Button variant="ghost" size="icon" className="absolute bottom-2 right-2" onClick={(e) => { e.stopPropagation(); handleSpeak(card.question, questionLang); }} disabled={isSpeaking} aria-label="Speak question"> <Volume2 className={cn("h-4 w-4", isSpeaking && "animate-pulse")} /> </Button> )}
              </CardContent>
              <CardFooter className="justify-center text-sm text-muted-foreground bg-muted/50 border-t py-3 min-h-[52px]"> Click card to reveal answer </CardFooter>
            </Card>
          </div>

          {/* Back Side */}
          <div className="flip-card-back absolute w-full h-full">
             {/* Apply card background style */}
            <Card className={cn("w-full h-full flex flex-col flashcard-border", fontClass)} style={cardDarkBgStyle}>
               <CardHeader className="text-xs text-muted-foreground bg-muted/50 border-b py-2 px-4">
                 <div className="flex justify-between items-center"> <span>{progressText || '\u00A0'}</span> </div>
               </CardHeader>
              <CardContent className="p-6 text-center relative overflow-auto flex-grow flex items-center justify-center">
                 {/* Apply text style and classes to existing <p> */}
                 <p className="text-xl md:text-2xl text-foreground inline-block px-2 py-1 rounded transition-colors duration-200" style={cardStyles.answerStyle}> {card.answer} </p>
                 {/* Original TTS Button */}
                 {settings?.ttsEnabled && card.answer && ( <Button variant="ghost" size="icon" className="absolute bottom-2 right-2" onClick={(e) => { e.stopPropagation(); handleSpeak(card.answer, answerLang); }} disabled={isSpeaking} aria-label="Speak answer"> <Volume2 className={cn("h-4 w-4", isSpeaking && "animate-pulse")} /> </Button> )}
              </CardContent>
              {/* --- Footer with ORIGINAL rating buttons --- */}
              <CardFooter className="bg-muted/50 border-t flex flex-row items-center justify-around gap-1 p-2 sm:justify-start sm:gap-2 sm:p-3">
                <TooltipProvider>
                  {/* Tooltip 1: Again - EXACT ORIGINAL BUTTON CODE */}
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button size="sm" variant="outline" className="flex-1 justify-center text-xs border-red-500 text-red-700 hover:bg-red-500/10 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300 active:scale-95 transition-all duration-150 sm:w-auto sm:justify-start sm:text-sm" onClick={(e) => { e.stopPropagation(); onAnswer(1); }} disabled={isTransitioning || isSpeaking} aria-label="Again - Complete reset (Press 1)">
                        <ThumbsDown className="h-4 w-4 sm:mr-1" />
                        <ThumbsDown className="h-4 w-4 -ml-2 sm:hidden" />
                        <span className="hidden sm:inline">Again</span>
                        <span className="hidden sm:inline ml-1 opacity-50">(1)</span>
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent side="bottom"><p className="font-medium">Again (1)</p><p className="text-sm text-muted-foreground">Complete reset. Use when you completely forgot or got it wrong.</p></TooltipContent>
                  </Tooltip>
                  {/* Tooltip 2: Hard - **CHANGED ICON** */}
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button size="sm" variant="outline" className="flex-1 justify-center text-xs border-amber-500 text-amber-700 hover:bg-amber-500/10 hover:text-amber-800 dark:text-amber-400 dark:hover:text-amber-300 active:scale-95 transition-all duration-150 sm:w-auto sm:justify-start sm:text-sm" onClick={(e) => { e.stopPropagation(); onAnswer(2); }} disabled={isTransitioning || isSpeaking} aria-label="Hard - Remember with significant effort (Press 2)">
                        <ThumbsUp className="h-4 w-4 sm:mr-1" />
                        <span className="hidden sm:inline">Hard</span>
                        <span className="hidden sm:inline ml-1 opacity-50">(2)</span>
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent side="bottom"><p className="font-medium">Hard (2)</p><p className="text-sm text-muted-foreground">Remembered with significant effort. Review interval will increase slightly.</p></TooltipContent>
                  </Tooltip>
                  {/* Tooltip 3: Fair - **CHANGED LABEL & TOOLTIP** */}
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button size="sm" variant="outline" className="flex-1 justify-center text-xs border-green-500 text-green-700 hover:bg-green-500/10 hover:text-green-800 dark:text-green-400 dark:hover:text-green-300 active:scale-95 transition-all duration-150 sm:w-auto sm:justify-start sm:text-sm" onClick={(e) => { e.stopPropagation(); onAnswer(3); }} disabled={isTransitioning || isSpeaking} aria-label="Fair - Remember with some effort (Press 3)">
                        <ThumbsUp className="h-4 w-4 sm:mr-1" />
                        <span className="hidden sm:inline">Fair</span>
                        <span className="hidden sm:inline ml-1 opacity-50">(3)</span>
                      </Button>
                    </TooltipTrigger>
                     <TooltipContent side="bottom"><p className="font-medium">Fair (3)</p><p className="text-sm text-muted-foreground">Remembered with some effort. Normal interval increase.</p></TooltipContent>
                  </Tooltip>
                  {/* Tooltip 4: Easy - EXACT ORIGINAL BUTTON CODE */}
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Button size="sm" variant="outline" className="flex-1 justify-center text-xs border-blue-500 text-blue-700 hover:bg-blue-500/10 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 active:scale-95 transition-all duration-150 sm:w-auto sm:justify-start sm:text-sm" onClick={(e) => { e.stopPropagation(); onAnswer(4); }} disabled={isTransitioning || isSpeaking} aria-label="Easy - Remember effortlessly (Press 4)">
                        <ThumbsUp className="h-4 w-4 sm:mr-1" />
                        <ThumbsUp className="h-4 w-4 -ml-2 sm:hidden" />
                        <span className="hidden sm:inline">Easy</span>
                        <span className="hidden sm:inline ml-1 opacity-50">(4)</span>
                      </Button>
                    </TooltipTrigger>
                    <TooltipContent side="bottom"><p className="font-medium">Easy (4)</p><p className="text-sm text-muted-foreground">Remembered effortlessly. Larger interval increase.</p></TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              </CardFooter>
              {/* ------------------------------------------------------- */}
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
}
=== layout/ResponsiveLayout.tsx ===
'use client';

import { useState, useCallback, ReactNode } from 'react';
import { Header } from './Header';
import { Sidebar } from './Sidebar';
import { cn } from '@/lib/utils';

interface ResponsiveLayoutProps {
  children: ReactNode;
}

export function ResponsiveLayout({ children }: ResponsiveLayoutProps) {
  const [isMobileSidebarOpen, setIsMobileSidebarOpen] = useState(false);
  const [isDesktopSidebarCollapsed, setIsDesktopSidebarCollapsed] = useState(false);

  const toggleMobileSidebar = useCallback(() => {
    setIsMobileSidebarOpen((prev) => !prev);
  }, []);

  const closeMobileSidebar = useCallback(() => {
    setIsMobileSidebarOpen(false);
  }, []);

  const toggleDesktopSidebar = useCallback(() => {
    setIsDesktopSidebarCollapsed((prev) => !prev);
  }, []);

  const collapsedWidth = 'md:pl-20';
  const expandedWidth = 'md:pl-64';

  return (
    <div className="flex min-h-screen flex-col">
      <Header onToggleMobileSidebar={toggleMobileSidebar} />
      <div className="flex flex-1">
        <Sidebar 
          isOpen={isMobileSidebarOpen} 
          onClose={closeMobileSidebar} 
          isCollapsed={isDesktopSidebarCollapsed}
          onToggleCollapse={toggleDesktopSidebar}
        />
        <main className={cn(
          "flex-1 bg-muted/40 pt-16 transition-all duration-300 ease-in-out",
          isDesktopSidebarCollapsed ? collapsedWidth : expandedWidth
        )}>
          {children}
        </main>
      </div>
    </div>
  );
} 
=== layout/Header.tsx ===
'use client';

import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Menu, Settings, Volume2 } from 'lucide-react';
import Image from 'next/image';
import { UserNavButton } from '@/components/user-nav';
import { TTSToggleButton } from '@/components/tts-toggle-button';

interface HeaderProps {
  onToggleMobileSidebar: () => void;
}

export function Header({ onToggleMobileSidebar }: HeaderProps) {
  return (
    <header className="fixed top-0 left-0 right-0 z-40 flex h-16 items-center justify-between border-b bg-background px-4 md:px-6">
      {/* Hamburger Menu for Mobile */}
      <Button
        variant="outline"
        size="icon"
        className="md:hidden mr-3" // Only show on mobile, ADDED mr-3 for spacing
        onClick={onToggleMobileSidebar}
        aria-label="Toggle Menu"
      >
        <Menu className="h-5 w-5" />
      </Button>

      {/* App Title/Logo - Updated with Image and Text */}
      <div className="flex items-center md:ml-0">
        <Link href="/" className="flex items-center gap-2 font-semibold group">
          <Image 
            src="/favicon.svg"
            alt="StudyCards Logo" 
            width={28}
            height={28}
            className="transition-transform group-hover:scale-110"
          />
          <span className="text-lg">StudyCards</span>
        </Link>
      </div>

      {/* Spacer to push icons to the right */}
      <div className="flex-1 md:hidden"></div>

      {/* Right-side icons */}
      <div className="flex items-center gap-3">
         {/* Settings Button - Hidden on mobile */}
        <Link href="/settings" className="hidden md:inline-flex"> {/* Hide Link on mobile */}
          <Button variant="ghost" size="icon" aria-label="Settings">
            <Settings className="h-5 w-5" />
          </Button>
        </Link>
        {/* Use the actual TTSToggleButton component */}
        <div className="hidden md:inline-flex"> {/* Wrapper to maintain layout */} 
          <TTSToggleButton />
        </div>
        {/* User/Profile Button (Using Functional Component) - Always visible */} 
        <UserNavButton />
      </div>
    </header>
  );
} 
=== layout/Sidebar.tsx ===
'use client';

import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { useState } from 'react';
import {
  Sheet,
  SheetContent,
  SheetOverlay,
  SheetClose,
  SheetTitle,
  SheetDescription,
} from '@/components/ui/sheet';
import { Button } from '@/components/ui/button';
import { cn } from '@/lib/utils'; // Assuming you have a utility for classnames
import {
  Tooltip,
  TooltipProvider,
  TooltipContent,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import {
  BookOpen,
  Tags,
  Settings,
  LayoutDashboard,
  List,
  PlusCircle,
  LogOut,
  PanelLeftClose,
  PanelLeftOpen,
} from 'lucide-react';
import { CreateDeckDialog } from '@/components/create-deck-dialog';

interface SidebarProps {
  isOpen: boolean;
  onClose: () => void;
  isCollapsed: boolean;
  onToggleCollapse: () => void;
}

const navItems = [
  {
    group: 'Practice',
    items: [
      { href: '/study/select', label: 'Start Session', icon: BookOpen },
      { href: '/study/sets', label: 'Smart Playlists', icon: List },
    ],
  },
  {
    group: 'Prepare',
    items: [
      { href: '/', label: 'Decks', icon: LayoutDashboard },
      { href: '/tags', label: 'Manage Tags', icon: Tags },
      { id: 'create-deck', label: 'Create Deck', icon: PlusCircle },
    ],
  },
  {
    group: 'Other',
    items: [
      { href: '/settings', label: 'Settings', icon: Settings },
      // Add Logout or other links here
      // Example: { href: '/logout', label: 'Logout', icon: LogOut }
    ],
  },
];

function NavigationContent({ isCollapsed, onClose }: { isCollapsed: boolean; onClose?: () => void }) {
  const pathname = usePathname();
  const [isCreateDeckOpen, setIsCreateDeckOpen] = useState(false);

  return (
    <>
      <nav className="flex flex-col gap-4 py-4">
        {navItems.map((group) => (
          <div key={group.group} className={cn("px-3", isCollapsed && "px-1")}>
            <div className="space-y-1">
              {group.items.map((item) => {
                if (item.id === 'create-deck') {
                  return (
                    <Tooltip key={item.id}>
                      <TooltipTrigger asChild>
                        <Button
                          variant={'ghost'}
                          className={cn(
                            "w-full justify-start",
                            isCollapsed && "justify-center h-10"
                          )}
                          onClick={() => setIsCreateDeckOpen(true)}
                          aria-label={item.label}
                        >
                          <item.icon className={cn("h-4 w-4", !isCollapsed && "mr-2")} />
                          <span className={cn(isCollapsed && "hidden")}>{item.label}</span>
                        </Button>
                      </TooltipTrigger>
                      {isCollapsed && (
                        <TooltipContent side="right">
                          <p>{item.label}</p>
                        </TooltipContent>
                      )}
                    </Tooltip>
                  );
                }

                return (
                  <Tooltip key={item.href}>
                    <TooltipTrigger asChild>
                      <Button
                        variant={pathname === item.href ? 'secondary' : 'ghost'}
                        className={cn(
                          "w-full justify-start",
                          isCollapsed && "justify-center h-10"
                        )}
                        asChild
                        onClick={onClose}
                      >
                        <Link href={item.href} aria-label={item.label}>
                          <item.icon className={cn("h-4 w-4", !isCollapsed && "mr-2")} />
                          <span className={cn(isCollapsed && "hidden")}>{item.label}</span>
                        </Link>
                      </Button>
                    </TooltipTrigger>
                    {isCollapsed && (
                      <TooltipContent side="right">
                        <p>{item.label}</p>
                      </TooltipContent>
                    )}
                  </Tooltip>
                );
              })}
            </div>
          </div>
        ))}
      </nav>
      <CreateDeckDialog open={isCreateDeckOpen} onOpenChange={setIsCreateDeckOpen} />
    </>
  );
}

export function Sidebar({ isOpen, onClose, isCollapsed, onToggleCollapse }: SidebarProps) {
  return (
    <TooltipProvider>
      {/* Mobile Sidebar using Sheet */}
      <Sheet open={isOpen} onOpenChange={(open) => !open && onClose()}>
        <SheetOverlay className="md:hidden" />
        <SheetContent side="left" className="w-64 p-0 md:hidden">
          <SheetTitle className="sr-only">Navigation Menu</SheetTitle>
          <SheetDescription className="sr-only">Main navigation links for the application.</SheetDescription>
          <NavigationContent isCollapsed={false} onClose={onClose} />
        </SheetContent>
      </Sheet>

      {/* Desktop Sidebar - Now collapsible */}
      <aside 
        className={cn(
          "hidden md:fixed md:left-0 md:top-0 md:bottom-0 md:z-30 md:flex md:h-full md:flex-col md:border-r bg-background pt-16",
          "transition-all duration-300 ease-in-out",
          isCollapsed ? "md:w-20" : "md:w-64"
        )}
      >
        <div className="flex-1 overflow-y-auto overflow-x-hidden">
             <NavigationContent isCollapsed={isCollapsed} />
        </div>
        <div className="mt-auto border-t p-2">
           <Button 
              variant="ghost" 
              size="icon" 
              className="w-full hidden md:block" 
              onClick={onToggleCollapse}
              aria-label={isCollapsed ? "Expand Sidebar" : "Collapse Sidebar"}
           >
              {isCollapsed ? <PanelLeftOpen className="h-5 w-5" /> : <PanelLeftClose className="h-5 w-5" />}
           </Button>
        </div>
      </aside>
    </TooltipProvider>
  );
} 
=== study-progress.tsx ===
// src/components/study/study-progress.tsx
import { Progress } from "@/components/ui/progress";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { HelpCircle } from "lucide-react";

interface StudyProgressProps {
    /** Current card number in the study queue */
    currentCardInQueue: number;
    /** Total number of cards in the study queue */
    totalCardsInQueue: number;
    /** SRS level counts for the current queue */
    srsLevels: {
        new: number;
        learning: number;
        review: number;
    };
}

export function StudyProgress({
    currentCardInQueue,
    totalCardsInQueue,
    srsLevels
}: StudyProgressProps) {
    // Calculate queue progress percentage
    const queueProgress = totalCardsInQueue > 0 
        ? Math.round((currentCardInQueue / totalCardsInQueue) * 100)
        : 0;

    // Calculate total cards for SRS distribution
    const totalSrsCards = srsLevels.new + srsLevels.learning + srsLevels.review;

    // Calculate percentages for SRS distribution
    const newPercent = totalSrsCards > 0 ? Math.round((srsLevels.new / totalSrsCards) * 100) : 0;
    const learningPercent = totalSrsCards > 0 ? Math.round((srsLevels.learning / totalSrsCards) * 100) : 0;
    const reviewPercent = totalSrsCards > 0 ? Math.round((srsLevels.review / totalSrsCards) * 100) : 0;

    return (
        <div className="max-w-2xl mx-auto mb-8 space-y-4">
            {/* Queue Progress */}
            <div>
                <div className="flex justify-between items-center mb-1">
                    <span className="text-sm text-muted-foreground">
                        Queue Progress ({currentCardInQueue} / {totalCardsInQueue} cards)
                    </span>
                    <span className="text-sm font-medium">{queueProgress}%</span>
                </div>
                <Progress 
                    value={queueProgress} 
                    aria-label={`Queue progress: ${queueProgress}%`} 
                    className="h-2" 
                />
            </div>

            {/* SRS Distribution */}
            <div>
                <div className="flex justify-between items-center mb-1">
                    <div className="flex items-center gap-2">
                        <span className="text-sm text-muted-foreground">
                            SRS Distribution
                        </span>
                        <TooltipProvider>
                            <Tooltip>
                                <TooltipTrigger>
                                    <HelpCircle className="h-4 w-4 text-muted-foreground" />
                                </TooltipTrigger>
                                <TooltipContent className="max-w-[300px]">
                                    <p className="font-semibold mb-2">Spaced Repetition System (SRS) Levels:</p>
                                    <ul className="list-disc pl-4 space-y-1">
                                        <li><span className="text-blue-500 font-medium">New</span>: Cards you haven't studied yet</li>
                                        <li><span className="text-amber-500 font-medium">Learning</span>: Cards being actively learned (levels 1-3)</li>
                                        <li><span className="text-green-500 font-medium">Review</span>: Cards in long-term memory (level 4+)</li>
                                    </ul>
                                </TooltipContent>
                            </Tooltip>
                        </TooltipProvider>
                    </div>
                    <div className="flex gap-4 text-xs">
                        <span className="text-blue-500">New: {srsLevels.new}</span>
                        <span className="text-amber-500">Learning: {srsLevels.learning}</span>
                        <span className="text-green-500">Review: {srsLevels.review}</span>
                    </div>
                </div>
                <div className="relative h-2 bg-muted rounded-full overflow-hidden">
                    {/* New Cards (Blue) */}
                    <div 
                        className="absolute left-0 top-0 h-full bg-blue-500" 
                        style={{ width: `${newPercent}%` }}
                        aria-label={`New cards: ${srsLevels.new}`}
                    />
                    {/* Learning Cards (Amber) */}
                    <div 
                        className="absolute h-full bg-amber-500" 
                        style={{ left: `${newPercent}%`, width: `${learningPercent}%` }}
                        aria-label={`Learning cards: ${srsLevels.learning}`}
                    />
                    {/* Review Cards (Green) */}
                    <div 
                        className="absolute h-full bg-green-500" 
                        style={{ left: `${newPercent + learningPercent}%`, width: `${reviewPercent}%` }}
                        aria-label={`Review cards: ${srsLevels.review}`}
                    />
                </div>
            </div>
        </div>
    );
}

// Optionally use export default if preferred
// export default StudyProgress;
=== tts-toggle-button.tsx ===
"use client"

import { Volume2, VolumeX } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"
import { useSettings } from "@/providers/settings-provider"

export function TTSToggleButton() {
  const { settings, updateSettings } = useSettings()

  const toggleTTS = () => {
    updateSettings({ ttsEnabled: !settings?.ttsEnabled })
  }

  return (
    <TooltipProvider>
      <Tooltip>
        <TooltipTrigger asChild>
          <Button
            variant="outline"
            size="icon"
            onClick={toggleTTS}
          >
            {settings?.ttsEnabled ? (
              <Volume2 className="h-5 w-5" />
            ) : (
              <VolumeX className="h-5 w-5" />
            )}
          </Button>
        </TooltipTrigger>
        <TooltipContent>
          <p>{settings?.ttsEnabled ? 'Disable' : 'Enable'} text-to-speech</p>
        </TooltipContent>
      </Tooltip>
    </TooltipProvider>
  )
} 
=== media-capture-tabs.tsx ===
'use client';

import React, { useCallback } from 'react';
import { FileUpload } from '@/components/file-upload';

interface MediaCaptureTabsProps {
  onFilesSelected: (files: File[]) => void;
  supportedFileTypes: string;
  supportedExtensions: string[];
  maxFileSize?: number; // in MB
  maxImages?: number;
}

export function MediaCaptureTabs({
  onFilesSelected,
  supportedFileTypes,
  supportedExtensions,
  maxFileSize = 25,
  maxImages = 5
}: MediaCaptureTabsProps) {
  // Use a memoized callback to avoid re-renders
  const handleFileUpload = useCallback((files: File[]) => {
    console.log(`MediaCaptureTabs received ${files ? files.length : 0} files from FileUpload`);
    // Only propagate the update if we have valid inputs
    if (files && Array.isArray(files)) {
      onFilesSelected(files);
    }
  }, [onFilesSelected]);

  return (
    <FileUpload
      onFilesSelected={handleFileUpload}
      supportedFileTypes={supportedFileTypes}
      supportedExtensions={supportedExtensions}
      maxFileSize={maxFileSize}
    />
  );
} 
=== header.tsx -remove ===
"use client"

import Link from "next/link"
import { usePathname } from "next/navigation"
import { TTSToggleButton } from "@/components/tts-toggle-button"
import { SettingsButton } from "@/components/settings-button"
import { UserNavButton } from "@/components/user-nav"
import { TagsButton } from "@/components/tags-button"
import Image from 'next/image';

export function Header() {
  const pathname = usePathname()
  
  // Don't show header on login page
  if (pathname === "/login") {
    return null
  }

  return (
    <header className="flex justify-between items-center mb-6">
      <Link href="/" className="flex items-center gap-2 group">
        <Image 
          src="/favicon.svg"
          alt="StudyCards Logo" 
          width={28}
          height={28}
          className="transition-transform group-hover:scale-110"
        />
        <h1 className="text-3xl font-bold group-hover:text-primary transition-colors">
          StudyCards
        </h1>
      </Link>
      <div className="flex items-center space-x-2">
        <TTSToggleButton />
        <SettingsButton />
        <TagsButton />
        <UserNavButton />
      </div>
    </header>
  )
} 
=== flippable-flashcard.tsx -remove ===
// components/flippable-flashcard.tsx
"use client";

import React from 'react';
import { ThumbsUp, ThumbsDown } from 'lucide-react';
import { cn } from '@/lib/utils';
import { Card, CardContent, CardFooter, CardHeader } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { DifficultyIndicator } from '@/components/difficulty-indicator'; // Assuming this path is correct

interface FlippableFlashcardProps {
  // Card Content
  question: string;
  answer: string;
  difficultyScore?: number | null;

  // State & Interaction
  isFlipped: boolean;
  isTransitioning: boolean;
  onFlip: () => void;
  onAnswer: (correct: boolean) => void;

  // Styling & Context
  fontClass: string;
  isDifficultMode?: boolean;
  showDifficultySetting?: boolean;
  cardPositionText: string; // e.g., "Card 1 of 10"
  cardProgressText: string; // e.g., "1 / 3 correct"
}

export function FlippableFlashcard({
  question,
  answer,
  difficultyScore,
  isFlipped,
  isTransitioning,
  onFlip,
  onAnswer,
  fontClass,
  isDifficultMode = false,
  showDifficultySetting = false,
  cardPositionText,
  cardProgressText,
}: FlippableFlashcardProps) {

  // Stop propagation for answer buttons to prevent card flip
  const handleAnswerClick = (e: React.MouseEvent, correct: boolean) => {
    e.stopPropagation();
    onAnswer(correct);
  };

  // Allow flipping with space/enter keys
  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === ' ' || e.key === 'Enter') {
      e.preventDefault(); // Prevent scrolling or button activation
      onFlip();
    }
  };

  // Internal shared header component for DRYness
  const CardHeaderContent = () => (
     <div className="flex justify-between items-center">
       <div className="text-xs font-medium">{cardPositionText}</div>
       <div className="text-xs font-medium">{cardProgressText}</div>
       {showDifficultySetting && (
         <DifficultyIndicator
           difficultyScore={difficultyScore ?? null}
         />
       )}
     </div>
  );

  return (
    <div
      className={`flip-card ${isFlipped ? "flipped" : ""} w-full h-80 cursor-pointer`}
      onClick={onFlip}
      role="button"
      aria-label={isFlipped ? "Flip to question" : "Flip to answer"}
      tabIndex={0}
      onKeyDown={handleKeyDown}
    >
      <div className="flip-card-inner relative w-full h-full">
        {/* --- Front of Card --- */}
        <div className="flip-card-front absolute w-full h-full">
          <Card className={cn(
            "w-full h-full flex flex-col",
            isDifficultMode && "border-amber-500",
            fontClass // Apply dynamic font class
          )}>
            <CardHeader className="text-center text-sm text-muted-foreground bg-muted/50 border-b py-3">
              <CardHeaderContent />
            </CardHeader>
            <CardContent className="flex-grow flex items-center justify-center p-6 text-center">
              <p className="text-xl md:text-2xl">{question}</p>
            </CardContent>
            <CardFooter className="justify-center text-sm text-muted-foreground bg-muted/50 border-t py-3 min-h-[52px]">
              Click card to reveal answer
            </CardFooter>
          </Card>
        </div>

        {/* --- Back of Card --- */}
        <div className="flip-card-back absolute w-full h-full">
          <Card className={cn(
            "w-full h-full flex flex-col",
            isDifficultMode && "border-amber-500",
            fontClass // Apply dynamic font class
          )}>
            <CardHeader className="text-center text-sm text-muted-foreground bg-muted/50 border-b py-3">
               <CardHeaderContent />
            </CardHeader>
            <CardContent className="flex-grow flex items-center justify-center p-6 text-center">
              <p className="text-xl md:text-2xl">{answer}</p>
            </CardContent>
            <CardFooter className="text-center text-sm text-muted-foreground bg-muted/50 border-t py-3 space-x-4">
              <Button
                variant="outline"
                className="flex-1 border-red-500 text-red-700 hover:bg-red-500/10 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300 active:scale-95 transition-all duration-150"
                onClick={(e) => handleAnswerClick(e, false)}
                disabled={isTransitioning}
                aria-label="Mark as incorrect"
              >
                <ThumbsDown className="mr-2 h-4 w-4" /> Incorrect
              </Button>
              <Button
                variant="outline"
                className="flex-1 border-green-500 text-green-700 hover:bg-green-500/10 hover:text-green-800 dark:text-green-400 dark:hover:text-green-300 active:scale-95 transition-all duration-150"
                onClick={(e) => handleAnswerClick(e, true)}
                disabled={isTransitioning}
                aria-label="Mark as correct"
              >
                <ThumbsUp className="mr-2 h-4 w-4" /> Correct
              </Button>
            </CardFooter>
          </Card>
        </div>
      </div>
    </div>
  );
}
=== create-deck-dialog.tsx ===
"use client"

import type React from "react"

import { useState, useEffect } from "react"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Switch } from "@/components/ui/switch"
import { useDecks } from "@/hooks/use-decks"
import { useRouter } from "next/navigation"
import { useSettings } from "@/providers/settings-provider"
import { toast } from "sonner"

interface CreateDeckDialogProps {
  open: boolean
  onOpenChange: (open: boolean) => void
}

export function CreateDeckDialog({ open, onOpenChange }: CreateDeckDialogProps) {
  const [name, setName] = useState("")
  const [isBilingual, setIsBilingual] = useState(false)
  const [questionLanguage, setQuestionLanguage] = useState("")
  const [answerLanguage, setAnswerLanguage] = useState("")
  const [loading, setLoading] = useState(false)
  const { createDeck } = useDecks()
  const { settings } = useSettings()
  const router = useRouter()

  // Set default languages from settings
  useEffect(() => {
    if (settings?.appLanguage) {
      setQuestionLanguage(settings.appLanguage)
      setAnswerLanguage(settings.appLanguage)
    }
  }, [settings])

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!name.trim()) {
      toast.error("Deck name is required")
      return
    }

    try {
      setLoading(true)
      const { data: newDeckData, error: createError } = await createDeck({
        name,
        is_bilingual: isBilingual,
        primary_language: questionLanguage,
        secondary_language: answerLanguage,
      })

      if (createError) {
        console.error("Error creating deck (from hook):", createError)
        toast.error("Failed to create deck", {
          description: "Please try again or check the console for details."
        })
        return
      }

      if (!newDeckData || !newDeckData.id) {
        console.error("Error creating deck: No data or ID returned from hook.")
        toast.error("Failed to create deck", {
          description: "Could not retrieve deck information after creation."
        })
        return
      }

      toast.success("Deck created successfully!")

      onOpenChange(false)
      router.push(`/edit/${newDeckData.id}`)
    } catch (error) {
      console.error("Error creating deck:", error)
      toast.error("Failed to create deck", {
        description: error instanceof Error ? error.message : "An unexpected error occurred."
      })
    } finally {
      setLoading(false)
    }
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[425px]">
        <form onSubmit={handleSubmit}>
          <DialogHeader>
            <DialogTitle>Create New Deck</DialogTitle>
            <DialogDescription>Create a new deck of flashcards to study with.</DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="name" className="text-right">
                Name
              </Label>
              <Input
                id="name"
                value={name}
                onChange={(e) => setName(e.target.value)}
                className="col-span-3"
                placeholder="e.g., Biology 101"
                required
              />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="bilingual" className="text-right">
                Bilingual Mode
              </Label>
              <div className="flex items-center space-x-2 col-span-3">
                <Switch
                  id="bilingual"
                  checked={isBilingual}
                  onCheckedChange={setIsBilingual}
                />
                <Label htmlFor="bilingual">Enable separate languages for questions and answers</Label>
              </div>
            </div>
            {isBilingual ? (
              <>
                <div className="grid grid-cols-4 items-center gap-4">
                  <Label htmlFor="questionLanguage" className="text-right">
                    Question Language
                  </Label>
                  <Select value={questionLanguage} onValueChange={setQuestionLanguage}>
                    <SelectTrigger id="questionLanguage" className="col-span-3">
                      <SelectValue placeholder="Select language" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="en">English</SelectItem>
                      <SelectItem value="nl">Dutch</SelectItem>
                      <SelectItem value="fr">French</SelectItem>
                      <SelectItem value="de">German</SelectItem>
                      <SelectItem value="es">Spanish</SelectItem>
                      <SelectItem value="it">Italian</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="grid grid-cols-4 items-center gap-4">
                  <Label htmlFor="answerLanguage" className="text-right">
                    Answer Language
                  </Label>
                  <Select value={answerLanguage} onValueChange={setAnswerLanguage}>
                    <SelectTrigger id="answerLanguage" className="col-span-3">
                      <SelectValue placeholder="Select language" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="en">English</SelectItem>
                      <SelectItem value="nl">Dutch</SelectItem>
                      <SelectItem value="fr">French</SelectItem>
                      <SelectItem value="de">German</SelectItem>
                      <SelectItem value="es">Spanish</SelectItem>
                      <SelectItem value="it">Italian</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </>
            ) : (
              <div className="grid grid-cols-4 items-center gap-4">
                <Label htmlFor="language" className="text-right">
                  Language
                </Label>
                <Select 
                  value={questionLanguage} 
                  onValueChange={(value) => {
                    setQuestionLanguage(value)
                    setAnswerLanguage(value)
                  }}
                >
                  <SelectTrigger id="language" className="col-span-3">
                    <SelectValue placeholder="Select language" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="en">English</SelectItem>
                    <SelectItem value="nl">Dutch</SelectItem>
                    <SelectItem value="fr">French</SelectItem>
                    <SelectItem value="de">German</SelectItem>
                    <SelectItem value="es">Spanish</SelectItem>
                    <SelectItem value="it">Italian</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            )}
          </div>
          <DialogFooter>
            <Button type="submit" disabled={loading}>
              {loading ? "Creating..." : "Create Deck"}
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  )
}


=== tags/TagManagerClient.tsx ===
"use client";

import React, { useState } from 'react';
import { createTag, deleteTag } from '@/lib/actions/tagActions';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { toast } from 'sonner';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog"
import { Loader2 as IconLoader, X as IconX, Plus as IconPlus, Trash2 as IconTrash } from 'lucide-react';
import type { Tables } from "@/types/database";
import { Label } from '@/components/ui/label';

type Tag = Tables<'tags'>;

interface TagManagerClientProps {
  initialTags: Tag[];
}

/**
 * TagManagerClient Component
 * Allows users to view, create, and delete their global tags.
 * Receives pre-fetched tags data from the server component.
 */
export function TagManagerClient({ initialTags }: TagManagerClientProps) {
  const [allTags, setAllTags] = useState<Tag[]>(initialTags);
  const [newTagName, setNewTagName] = useState('');
  const [isCreating, setIsCreating] = useState(false);
  const [isDeleting, setIsDeleting] = useState<{ [tagId: string]: boolean }>({});

  // --- Handlers ---

  const handleCreateTag = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const trimmedName = newTagName.trim();
    if (!trimmedName) {
      toast.error("Tag name cannot be empty.");
      return;
    }

    setIsCreating(true);
    const result = await createTag(trimmedName);
    setIsCreating(false);

    if (result.error) {
      toast.error(`Failed to create tag: ${result.error}`);
    } else {
      toast.success(`Tag "${result.data?.name}" created.`);
      setNewTagName(''); // Clear input
      // Add the new tag to the local state
      if (result.data) {
        setAllTags(prev => [...prev, result.data!]);
      }
    }
  };

  const handleDeleteTag = async (tag: Tag) => {
    setIsDeleting(prev => ({ ...prev, [tag.id]: true }));
    const result = await deleteTag(tag.id);
    setIsDeleting(prev => ({ ...prev, [tag.id]: false }));

    if (result.error) {
      toast.error(`Failed to delete tag "${tag.name}": ${result.error}`);
    } else {
      toast.success(`Tag "${tag.name}" deleted.`);
      // Remove the tag from the local state
      setAllTags(prev => prev.filter(t => t.id !== tag.id));
    }
  };

  // --- Render Logic ---

  return (
    <div className="space-y-6">
      {/* Create Tag Form */}
      <form onSubmit={handleCreateTag} className="flex items-end gap-2">
        <div className="flex-grow">
            <Label htmlFor="new-tag-name" className="sr-only">New tag name</Label>
            <Input
                id="new-tag-name"
                type="text"
                placeholder="Enter new tag name..."
                value={newTagName}
                onChange={(e) => setNewTagName(e.target.value)}
                disabled={isCreating}
                maxLength={50} // Match schema validation
            />
        </div>
        <Button type="submit" disabled={isCreating || !newTagName.trim()}>
          {isCreating ? <IconLoader className="h-4 w-4 animate-spin mr-2" /> : <IconPlus className="h-4 w-4 mr-2" />}
          Create Tag
        </Button>
      </form>

      <hr />

      {/* Tag List */}
      <div>
        <h3 className="text-lg font-medium mb-3">Your Tags</h3>
        {allTags.length === 0 ? (
          <p className="text-sm text-muted-foreground">You haven't created any tags yet.</p>
        ) : (
          <ul className="space-y-2">
            {allTags.map((tag) => (
              <li key={tag.id} className="flex items-center justify-between p-2 border rounded-md hover:bg-muted/50">
                <span className="text-sm font-medium">{tag.name}</span>
                 <AlertDialog>
                   <AlertDialogTrigger asChild>
                      <Button
                        variant="ghost"
                        size="icon"
                        disabled={isDeleting[tag.id]}
                        aria-label={`Delete tag ${tag.name}`}
                        className="h-7 w-7 text-muted-foreground hover:text-destructive hover:bg-destructive/10"
                      >
                        {isDeleting[tag.id] ? (
                          <IconLoader className="h-4 w-4 animate-spin" />
                        ) : (
                          <IconTrash className="h-4 w-4" />
                        )}
                      </Button>
                    </AlertDialogTrigger>
                    <AlertDialogContent>
                      <AlertDialogHeader>
                        <AlertDialogTitle>Are you sure?</AlertDialogTitle>
                        <AlertDialogDescription>
                          This action cannot be undone. Deleting the tag "<strong className='font-semibold'>{tag.name}</strong>" will remove it from all associated cards.
                        </AlertDialogDescription>
                      </AlertDialogHeader>
                      <AlertDialogFooter>
                        <AlertDialogCancel disabled={isDeleting[tag.id]}>Cancel</AlertDialogCancel>
                        <AlertDialogAction
                          onClick={() => handleDeleteTag(tag)}
                          disabled={isDeleting[tag.id]}
                          className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
                        >
                          {isDeleting[tag.id] && <IconLoader className="h-4 w-4 animate-spin mr-2" />} 
                          Delete Tag
                        </AlertDialogAction>
                      </AlertDialogFooter>
                    </AlertDialogContent>
                  </AlertDialog>
              </li>
            ))}
          </ul>
        )}
      </div>
    </div>
  );
} 
=== tags/TagManager.tsx ===
'use client';

import React, { useState } from 'react';
import { useTags } from '@/hooks/useTags';
import { createTag, deleteTag } from '@/lib/actions/tagActions';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { toast } from 'sonner';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog"
import { Loader2 as IconLoader, X as IconX, Plus as IconPlus, Trash2 as IconTrash } from 'lucide-react';
import type { Tables } from "@/types/database";
type DbTag = Tables<'tags'>;
import { Label } from '@/components/ui/label';

/**
 * TagManager Component
 * Allows users to view, create, and delete their global tags.
 */
export function TagManager() {
  const { allTags, isLoading: isLoadingTags, error: tagsError, refetchAllTags } = useTags();
  const [newTagName, setNewTagName] = useState('');
  const [isCreating, setIsCreating] = useState(false);
  const [isDeleting, setIsDeleting] = useState<{ [tagId: string]: boolean }>({});

  // --- Handlers ---

  const handleCreateTag = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const trimmedName = newTagName.trim();
    if (!trimmedName) {
      toast.error("Tag name cannot be empty.");
      return;
    }

    setIsCreating(true);
    const result = await createTag(trimmedName);
    setIsCreating(false);

    if (result.error) {
      toast.error(`Failed to create tag: ${result.error}`);
    } else {
      toast.success(`Tag "${result.data?.name}" created.`);
      setNewTagName(''); // Clear input
      await refetchAllTags(); // Refresh the list
    }
  };

  const handleDeleteTag = async (tag: DbTag) => {
    setIsDeleting(prev => ({ ...prev, [tag.id]: true }));
    const result = await deleteTag(tag.id);
    setIsDeleting(prev => ({ ...prev, [tag.id]: false }));

    if (result.error) {
      toast.error(`Failed to delete tag "${tag.name}": ${result.error}`);
    } else {
      toast.success(`Tag "${tag.name}" deleted.`);
      await refetchAllTags(); // Refresh the list
    }
  };

  // --- Render Logic ---

  return (
    <div className="space-y-6">
      {/* Create Tag Form */}
      <form onSubmit={handleCreateTag} className="flex items-end gap-2">
        <div className="flex-grow">
            <Label htmlFor="new-tag-name" className="sr-only">New tag name</Label>
            <Input
                id="new-tag-name"
                type="text"
                placeholder="Enter new tag name..."
                value={newTagName}
                onChange={(e) => setNewTagName(e.target.value)}
                disabled={isCreating}
                maxLength={50} // Match schema validation
            />
        </div>
        <Button type="submit" disabled={isCreating || !newTagName.trim()}>
          {isCreating ? <IconLoader className="h-4 w-4 animate-spin mr-2" /> : <IconPlus className="h-4 w-4 mr-2" />}
          Create Tag
        </Button>
      </form>

      <hr />

      {/* Tag List */}
      <div>
        <h3 className="text-lg font-medium mb-3">Your Tags</h3>
        {isLoadingTags ? (
          <div className="flex items-center space-x-2 text-muted-foreground">
            <IconLoader className="h-4 w-4 animate-spin" />
            <span>Loading tags...</span>
          </div>
        ) : tagsError ? (
          <p className="text-sm text-destructive">Error loading tags: {tagsError}</p>
        ) : allTags.length === 0 ? (
          <p className="text-sm text-muted-foreground">You haven't created any tags yet.</p>
        ) : (
          <ul className="space-y-2">
            {allTags.map((tag) => (
              <li key={tag.id} className="flex items-center justify-between p-2 border rounded-md hover:bg-muted/50">
                <span className="text-sm font-medium">{tag.name}</span>
                 <AlertDialog>
                   <AlertDialogTrigger asChild>
                      <Button
                        variant="ghost"
                        size="icon"
                        disabled={isDeleting[tag.id]}
                        aria-label={`Delete tag ${tag.name}`}
                        className="h-7 w-7 text-muted-foreground hover:text-destructive hover:bg-destructive/10"
                      >
                        {isDeleting[tag.id] ? (
                          <IconLoader className="h-4 w-4 animate-spin" />
                        ) : (
                          <IconTrash className="h-4 w-4" />
                        )}
                      </Button>
                    </AlertDialogTrigger>
                    <AlertDialogContent>
                      <AlertDialogHeader>
                        <AlertDialogTitle>Are you sure?</AlertDialogTitle>
                        <AlertDialogDescription>
                          This action cannot be undone. Deleting the tag "<strong className='font-semibold'>{tag.name}</strong>" will remove it from all associated cards.
                        </AlertDialogDescription>
                      </AlertDialogHeader>
                      <AlertDialogFooter>
                        <AlertDialogCancel disabled={isDeleting[tag.id]}>Cancel</AlertDialogCancel>
                        <AlertDialogAction
                          onClick={() => handleDeleteTag(tag)}
                          disabled={isDeleting[tag.id]}
                          className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
                        >
                          {isDeleting[tag.id] && <IconLoader className="h-4 w-4 animate-spin mr-2" />} 
                          Delete Tag
                        </AlertDialogAction>
                      </AlertDialogFooter>
                    </AlertDialogContent>
                  </AlertDialog>
              </li>
            ))}
          </ul>
        )}
      </div>
    </div>
  );
} 
=== settings-button.tsx ===
"use client"

import { Settings } from "lucide-react"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"

export function SettingsButton() {
  const router = useRouter()

  return (
    <TooltipProvider>
      <Tooltip>
        <TooltipTrigger asChild>
          <Button
            variant="outline"
            size="icon"
            onClick={() => router.push("/settings")}
          >
            <Settings className="h-5 w-5" />
          </Button>
        </TooltipTrigger>
        <TooltipContent>
          <p>Settings</p>
        </TooltipContent>
      </Tooltip>
    </TooltipProvider>
  )
} 
=== tags-button.tsx ===
'use client'

import { Tags } from "lucide-react"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

/**
 * A button component that navigates to the tag management page.
 */
export function TagsButton() {
  const router = useRouter()

  return (
    <TooltipProvider>
      <Tooltip>
        <TooltipTrigger asChild>
          <Button
            variant="outline"
            size="icon"
            onClick={() => router.push("/tags")} // Navigate to /tags page
            aria-label="Manage Tags"
          >
            <Tags className="h-5 w-5" />
          </Button>
        </TooltipTrigger>
        <TooltipContent>
          <p>Manage Tags</p>
        </TooltipContent>
      </Tooltip>
    </TooltipProvider>
  )
} 
=== deck-header.tsx ===
// src/components/study/deck-header.tsx
import Link from "next/link";
import { ArrowLeft, RotateCcw } from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";

interface DeckHeaderProps {
  deckName: string;
  onReset: () => void;
  showReset: boolean;
}

export function DeckHeader({ deckName, onReset, showReset }: DeckHeaderProps) {
  return (
    <div className="flex flex-col sm:flex-row justify-between items-center mb-6 gap-4">
      <div className="flex items-center">
        <Link href="/" className="mr-2" aria-label="Back to decks">
          <Button variant="ghost" size="icon">
            <ArrowLeft className="h-5 w-5" />
          </Button>
        </Link>
        <h1 className="text-2xl font-bold truncate" title={deckName}>{deckName}</h1>
      </div>
      <div className="flex items-center space-x-2">
        {showReset && (
          <AlertDialog>
            <AlertDialogTrigger asChild>
              <Button variant="outline" size="sm">
                <RotateCcw className="mr-2 h-4 w-4" /> Reset Progress
              </Button>
            </AlertDialogTrigger>
            <AlertDialogContent>
              <AlertDialogHeader>
                <AlertDialogTitle>Confirm Reset</AlertDialogTitle>
                <AlertDialogDescription>
                  Reset all study progress for this deck? This cannot be undone.
                </AlertDialogDescription>
              </AlertDialogHeader>
              <AlertDialogFooter>
                <AlertDialogCancel>Cancel</AlertDialogCancel>
                <AlertDialogAction
                  onClick={onReset}
                  className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
                >
                  Reset Now
                </AlertDialogAction>
              </AlertDialogFooter>
            </AlertDialogContent>
          </AlertDialog>
        )}
      </div>
    </div>
  );
}

// Optionally use export default if preferred
// export default DeckHeader;
=== table-editor.tsx ===
"use client"
import { useMemo } from "react"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Trash2, Plus } from "lucide-react"
import type { FlashCard } from "@/types/deck"
import { debounce } from "@/lib/utils"

const DEBOUNCE_WAIT_MS = 500;

interface TableEditorProps {
  cards: FlashCard[]
  onUpdate: (id: string, question: string, answer: string) => void
  onDelete: (id: string) => void
  onAdd: () => void
}

export function TableEditor({ cards, onUpdate, onDelete, onAdd }: TableEditorProps) {
  const debouncedUpdateHandlers = useMemo(() => {
    const handlers: Record<string, (question: string, answer: string) => void> = {};
    cards.forEach(card => {
      handlers[card.id] = debounce((question: string, answer: string) => {
        onUpdate(card.id, question, answer);
      }, DEBOUNCE_WAIT_MS);
    });
    return handlers;
  }, [cards, onUpdate]);

  return (
    <div className="space-y-4">
      <div className="flex justify-end">
        <Button onClick={onAdd}>
          <Plus className="mr-2 h-4 w-4" />
          Add Card
        </Button>
      </div>

      <div className="border rounded-md">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead className="w-[50%]">Question</TableHead>
              <TableHead className="w-[45%]">Answer</TableHead>
              <TableHead className="w-[5%]"></TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {cards.length === 0 ? (
              <TableRow>
                <TableCell colSpan={3} className="text-center py-8 text-muted-foreground">
                  No cards in this deck yet. Click "Add Card" to get started.
                </TableCell>
              </TableRow>
            ) : (
              cards.map((card) => (
                <TableRow key={card.id}>
                  <TableCell>
                    <Input
                      defaultValue={card.question}
                      onChange={(e) => {
                        const newQuestion = e.target.value;
                        debouncedUpdateHandlers[card.id]?.(newQuestion, card.answer);
                      }}
                      placeholder="Enter question"
                    />
                  </TableCell>
                  <TableCell>
                    <Input
                      defaultValue={card.answer}
                      onChange={(e) => {
                        const newAnswer = e.target.value;
                        debouncedUpdateHandlers[card.id]?.(card.question, newAnswer);
                      }}
                      placeholder="Enter answer"
                    />
                  </TableCell>
                  <TableCell>
                    <Button variant="ghost" size="icon" onClick={() => onDelete(card.id)}>
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </TableCell>
                </TableRow>
              ))
            )}
          </TableBody>
        </Table>
      </div>
    </div>
  )
}


=== StudySetSelector.tsx ===
// components/StudySetSelector.tsx
'use client';

import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useStudySets } from '@/hooks/useStudySets';
import { resolveStudyQuery } from '@/lib/actions/studyQueryActions';
import type { StudyQueryCriteria } from '@/lib/schema/study-query.schema'; 
import type { Database, Tables } from "@/types/database"; 
import type { StudyInput, StudyMode } from "@/store/studySessionStore";
import { toast } from 'sonner';
import { Loader2 as IconLoader } from 'lucide-react';

type DbDeck = Pick<Tables<'decks'>, 'id' | 'name'>;
type DbStudySet = Pick<Tables<'study_sets'>, 'id' | 'name'>;

interface StudySetSelectorProps {
  decks: DbDeck[];
  studySets?: DbStudySet[];
  isLoadingStudySets?: boolean;
  onStartStudying: (actionInput: StudyInput, mode: StudyMode) => void;
}

type SelectionType = 'all' | 'deck' | 'studySet'; 

export function StudySetSelector({
   decks = [], 
   studySets = [],
   isLoadingStudySets = false,
   onStartStudying 
}: StudySetSelectorProps) {
  const [selectionType, setSelectionType] = useState<SelectionType>('all');
  const [selectedDeckId, setSelectedDeckId] = useState<string | undefined>(undefined); 
  const [selectedStudySetId, setSelectedStudySetId] = useState<string | undefined>(undefined); 
  const [selectedMode, setSelectedMode] = useState<StudyMode>('learn');
  
  // New state for card counts
  const [isLoadingCounts, setIsLoadingCounts] = useState<boolean>(false);
  const [learnCount, setLearnCount] = useState<number>(0);
  const [reviewCount, setReviewCount] = useState<number>(0);
  const [countError, setCountError] = useState<string | null>(null);

  // Generate the current selection criteria
  const getCurrentCriteria = (): StudyInput | null => {
    if (selectionType === 'all') {
      return { criteria: { 
        allCards: true,
        tagLogic: 'ANY',
        includeDifficult: false
      } };
    } else if (selectionType === 'deck') {
      if (!selectedDeckId) return null;
      return { criteria: { 
        deckId: selectedDeckId,
        tagLogic: 'ANY',
        includeDifficult: false
      } };
    } else if (selectionType === 'studySet') {
      if (!selectedStudySetId) return null;
      return { studySetId: selectedStudySetId };
    } 
    return null;
  };

  // Fetch card counts whenever the selection changes
  useEffect(() => {
    const fetchCardCounts = async () => {
      const currentInput = getCurrentCriteria();
      if (!currentInput) {
        setLearnCount(0);
        setReviewCount(0);
        return;
      }

      setIsLoadingCounts(true);
      setCountError(null);
      
      try {
        // Query for learning-eligible cards
        const learnResult = 'criteria' in currentInput 
          ? await resolveStudyQuery({ 
              criteria: { 
                ...currentInput.criteria, 
                includeLearning: true 
              } 
            })
          : await resolveStudyQuery(currentInput); // For studySetId

        // Query for review-eligible cards
        const reviewResult = 'criteria' in currentInput 
          ? await resolveStudyQuery({ 
              criteria: { 
                ...currentInput.criteria, 
                nextReviewDue: { operator: 'isDue' } 
              } 
            })
          : await resolveStudyQuery(currentInput); // For studySetId

        if (learnResult.error) {
          console.error("Error fetching learn count:", learnResult.error);
          setCountError("Failed to check available cards");
        }
        
        if (reviewResult.error) {
          console.error("Error fetching review count:", reviewResult.error);
          setCountError("Failed to check available cards");
        }

        // Set counts
        const learnCardIds = learnResult.data || [];
        const reviewCardIds = reviewResult.data || [];
        
        // For the review count, we only count cards with a next_review_due
        // This would ideally be filtered by the DB function, but for now we'll assume all returned cards are valid
        setLearnCount(learnCardIds.length);
        setReviewCount(reviewCardIds.length);
        
      } catch (error) {
        console.error("Error fetching card counts:", error);
        setCountError("Error checking available cards");
        setLearnCount(0);
        setReviewCount(0);
      } finally {
        setIsLoadingCounts(false);
      }
    };

    fetchCardCounts();
  }, [selectionType, selectedDeckId, selectedStudySetId]);

  const handleInitiateStudy = () => {
    const actionInput = getCurrentCriteria();
    
    if (!actionInput) {
      toast.error("Please select a valid study option.");
      return;
    }
    
    // Verify counts for the selected mode
    if (selectedMode === 'learn' && learnCount === 0) {
      toast.error("No cards available for learning in this selection.");
      return;
    }
    
    if (selectedMode === 'review' && reviewCount === 0) {
      toast.error("No cards due for review in this selection.");
      return;
    }
    
    onStartStudying(actionInput, selectedMode);
  };

  const isStartDisabled = 
    (selectionType === 'deck' && !selectedDeckId) || 
    (selectionType === 'studySet' && !selectedStudySetId) ||
    (selectedMode === 'learn' && learnCount === 0) ||
    (selectedMode === 'review' && reviewCount === 0);

  return (
    <div className="space-y-6 p-4 border rounded-md">
      <h3 className="text-lg font-medium">Select Cards to Study</h3>

      <RadioGroup
        value={selectionType}
        onValueChange={(value) => {
          const newType = value as SelectionType;
          setSelectionType(newType);
          setSelectedDeckId(undefined);
          setSelectedStudySetId(undefined); 
        }}
        className="flex flex-wrap gap-4"
      >
         <div className="flex items-center space-x-2">
          <RadioGroupItem value="all" id="r-all" />
          <Label htmlFor="r-all">All My Cards</Label>
        </div>
        <div className="flex items-center space-x-2">
          <RadioGroupItem value="deck" id="r-deck" />
          <Label htmlFor="r-deck">From a Deck</Label>
        </div>
         <div className="flex items-center space-x-2">
          <RadioGroupItem value="studySet" id="r-studySet" disabled={isLoadingStudySets} />
          <Label htmlFor="r-studySet" className={isLoadingStudySets ? "text-muted-foreground" : ""}>
            Smart Playlist {isLoadingStudySets ? "(Loading...)" : ""}
          </Label>
        </div>
      </RadioGroup>

      {selectionType === 'deck' && (
         <div className="space-y-2 mt-4"> 
          <Label htmlFor="deck-select">Choose deck</Label>
          <Select value={selectedDeckId} onValueChange={setSelectedDeckId}>
            <SelectTrigger id="deck-select" className="w-full sm:w-[280px]"><SelectValue placeholder="Select a deck..." /></SelectTrigger>
            <SelectContent>
              {decks.length > 0 ? (
                decks.map((deck) => (
                  <SelectItem key={deck.id} value={deck.id}>{deck.name as string}</SelectItem>
                ))
              ) : (
                <SelectItem value="no-decks" disabled>No decks available</SelectItem>
              )}
            </SelectContent>
          </Select>
        </div>
      )}
      
       {selectionType === 'studySet' && (
         <div className="space-y-2 mt-4"> 
          <Label htmlFor="study-set-select">Choose playlist</Label>
          <Select
            value={selectedStudySetId}
            onValueChange={setSelectedStudySetId}
            disabled={isLoadingStudySets}
          >
            <SelectTrigger id="study-set-select" className="w-full sm:w-[280px]">
              <SelectValue placeholder="Select a smart playlist..." />
            </SelectTrigger>
            <SelectContent>
              {isLoadingStudySets ? (
                  <SelectItem value="loading" disabled>Loading playlists...</SelectItem>
              ) : studySets.length > 0 ? (
                studySets.map((set) => (
                  <SelectItem key={set.id} value={set.id}>
                    {set.name as string}
                  </SelectItem>
                ))
              ) : (
                <SelectItem value="no-sets" disabled>No smart playlists saved</SelectItem>
              )}
            </SelectContent>
          </Select>
        </div>
      )}

      {countError && (
        <div className="text-destructive text-sm">
          {countError}
        </div>
      )}

      {isLoadingCounts && (
        <div className="flex items-center text-muted-foreground text-sm">
          <IconLoader className="w-3 h-3 mr-2 animate-spin" />
          Checking available cards...
        </div>
      )}

      <hr />

      <div className="space-y-2">
        <Label>Choose Study Mode</Label>
        <RadioGroup
          value={selectedMode}
          onValueChange={(value) => setSelectedMode(value as StudyMode)}
          className="flex space-x-4"
        >
           <div className="flex items-center space-x-2">
            <RadioGroupItem value="learn" id="m-learn" disabled={learnCount === 0} />
            <Label 
              htmlFor="m-learn" 
              className={learnCount === 0 ? "text-muted-foreground" : ""}
            >
              Learn {learnCount > 0 && `(${learnCount})`}
            </Label>
          </div>
          <div className="flex items-center space-x-2">
            <RadioGroupItem value="review" id="m-review" disabled={reviewCount === 0} />
            <Label 
              htmlFor="m-review" 
              className={reviewCount === 0 ? "text-muted-foreground" : ""}
            >
              Review (SRS) {reviewCount > 0 && `(${reviewCount})`}
            </Label>
          </div>
        </RadioGroup>
        <p className="text-sm text-muted-foreground">
          {selectedMode === 'learn'
            ? "Reviews all selected cards, repeating until learned in this session."
            : "Reviews only cards that are due based on Spaced Repetition."
          }
        </p>
      </div>

      <Button
        onClick={handleInitiateStudy}
        disabled={isStartDisabled} 
        className="w-full sm:w-auto"
      >
        Start Studying 
      </Button>
    </div>
  );
}
=== camera-capture.tsx ===
'use client';

import { useState, useRef, useCallback } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Camera, Trash2, CheckCircle } from 'lucide-react';

interface CameraCaptureProps {
  onCapture: (images: File[]) => void;
  maxImages?: number;
}

export function CameraCapture({ onCapture, maxImages = 5 }: CameraCaptureProps) {
  const [capturedImages, setCapturedImages] = useState<File[]>([]);
  const [isCapturing, setIsCapturing] = useState(false);
  const videoRef = useRef<HTMLVideoElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);

  // Start camera
  const startCamera = useCallback(async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ 
        video: { 
          facingMode: 'environment', // Prefer back camera
          width: { ideal: 1920 },
          height: { ideal: 1080 }
        } 
      });
      
      if (videoRef.current) {
        videoRef.current.srcObject = stream;
        videoRef.current.onloadedmetadata = () => {
          if (videoRef.current) {
            videoRef.current.play().catch(err => {
              console.error('Error playing video:', err);
              alert('Unable to start camera. Please check permissions or try uploading images instead.');
            });
          }
        };
        setIsCapturing(true);
      }
    } catch (err) {
      console.error('Error accessing camera:', err);
      alert('Unable to access camera. Please check permissions or try uploading images instead.');
    }
  }, []);

  // Stop camera
  const stopCamera = useCallback(() => {
    if (videoRef.current && videoRef.current.srcObject) {
      const stream = videoRef.current.srcObject as MediaStream;
      stream.getTracks().forEach(track => track.stop());
      videoRef.current.srcObject = null;
      setIsCapturing(false);
    }
  }, []);

  // Capture image
  const captureImage = useCallback(() => {
    if (!videoRef.current || !canvasRef.current) return;

    const video = videoRef.current;
    const canvas = canvasRef.current;
    const context = canvas.getContext('2d');

    if (!context) return;

    // Set canvas dimensions to match video
    canvas.width = video.videoWidth;
    canvas.height = video.videoHeight;
    
    // Draw video frame to canvas
    context.drawImage(video, 0, 0, canvas.width, canvas.height);
    
    // Convert canvas to blob
    canvas.toBlob((blob) => {
      if (!blob) return;
      
      // Create file from blob
      const timestamp = new Date().toISOString();
      const file = new File([blob], `camera-capture-${timestamp}.jpg`, { type: 'image/jpeg' });
      
      // Add to captured images
      setCapturedImages(prev => [...prev, file]);
      
      // If we've reached max images, stop camera
      if (capturedImages.length + 1 >= maxImages) {
        stopCamera();
      }
    }, 'image/jpeg', 0.9);
  }, [capturedImages.length, maxImages, stopCamera]);

  // Remove image
  const removeImage = useCallback((index: number) => {
    setCapturedImages(prev => prev.filter((_, i) => i !== index));
  }, []);

  // Handle file selection as alternative to camera
  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (!files || files.length === 0) return;
    
    const newFiles: File[] = [];
    for (let i = 0; i < Math.min(files.length, maxImages - capturedImages.length); i++) {
      newFiles.push(files[i]);
    }
    
    setCapturedImages(prev => [...prev, ...newFiles]);
    
    // Reset the input to allow re-selection of the same file
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  // Submit captured images
  const handleSubmit = useCallback(() => {
    if (capturedImages.length === 0) return;
    onCapture(capturedImages);
    setCapturedImages([]);
  }, [capturedImages, onCapture]);

  return (
    <div className="flex flex-col gap-4">
      {/* Hidden elements */}
      <input
        type="file"
        accept="image/*"
        multiple
        ref={fileInputRef}
        onChange={handleFileSelect}
        className="hidden"
      />
      <canvas ref={canvasRef} className="hidden" />
      
      {/* Camera view or captured images */}
      <Card className="overflow-hidden">
        {isCapturing ? (
          <div className="relative">
            <video
              ref={videoRef}
              autoPlay
              playsInline
              muted
              onPlay={() => console.log('Camera video started playing')}
              className="w-full h-auto aspect-video object-cover"
            />
            <div className="absolute bottom-4 left-0 right-0 flex justify-center">
              <Button 
                variant="secondary" 
                size="lg" 
                className="rounded-full w-14 h-14"
                onClick={captureImage}
              >
                <Camera className="h-6 w-6" />
              </Button>
            </div>
          </div>
        ) : (
          <div className="p-4">
            {capturedImages.length > 0 ? (
              <div className="grid grid-cols-2 md:grid-cols-3 gap-2">
                {capturedImages.map((image, index) => (
                  <div key={index} className="relative aspect-video">
                    <img
                      src={URL.createObjectURL(image)}
                      alt={`Captured ${index + 1}`}
                      className="w-full h-full object-cover rounded-md"
                    />
                    <Button
                      variant="destructive"
                      size="icon"
                      className="absolute top-1 right-1 w-6 h-6 rounded-full"
                      onClick={() => removeImage(index)}
                    >
                      <Trash2 className="h-3 w-3" />
                    </Button>
                  </div>
                ))}
              </div>
            ) : (
              <div className="flex flex-col items-center justify-center py-8 text-center">
                <Camera className="h-12 w-12 mb-2 text-muted-foreground" />
                <h3 className="font-medium text-lg">No images captured</h3>
                <p className="text-sm text-muted-foreground mb-4">
                  Start the camera to capture images or upload them directly
                </p>
                <div className="flex gap-2">
                  <Button onClick={startCamera}>Open Camera</Button>
                  <Button
                    variant="outline"
                    onClick={() => fileInputRef.current?.click()}
                  >
                    Upload Images
                  </Button>
                </div>
              </div>
            )}
          </div>
        )}
      </Card>
      
      {/* Controls */}
      {capturedImages.length > 0 && (
        <div className="flex justify-between">
          <div className="flex items-center gap-2">
            <span className="text-sm">
              {capturedImages.length} of {maxImages} images captured
            </span>
            {capturedImages.length < maxImages && !isCapturing && (
              <Button 
                variant="outline" 
                size="sm" 
                onClick={startCamera}
              >
                Add More
              </Button>
            )}
          </div>
          <div className="flex gap-2">
            {isCapturing && (
              <Button 
                variant="outline" 
                onClick={stopCamera}
              >
                Done
              </Button>
            )}
            <Button 
              onClick={handleSubmit}
              disabled={capturedImages.length === 0}
            >
              <CheckCircle className="mr-2 h-4 w-4" />
              Use {capturedImages.length} Image{capturedImages.length !== 1 ? 's' : ''}
            </Button>
          </div>
        </div>
      )}
      
      {isCapturing && (
        <p className="text-sm text-muted-foreground text-center">
          Aim your camera at the document or text you want to capture
        </p>
      )}
    </div>
  );
} 
=== difficulty-indicator.tsx -remove ===
import { HelpCircle } from "lucide-react"
import { cn } from "@/lib/utils"

export const EASY_CUTOFF = 0.40;
export const MEDIUM_CUTOFF = 0.58;

interface DifficultyIndicatorProps {
  difficultyScore: number | null
  className?: string
}

export function DifficultyIndicator({ difficultyScore, className }: DifficultyIndicatorProps) {
  if (difficultyScore === null) {
    return (
      <div className={cn("flex items-center gap-1 text-muted-foreground", className)}>
        <HelpCircle className="h-4 w-4" />
        <span className="text-xs">Unknown</span>
      </div>
    )
  }

  let color: string
  let label: string
  let emoji: string

  if (difficultyScore === 0) {
    color = "text-gray-500"
    label = "Freshly Cracked"
    emoji = "🐣"
  } else if (difficultyScore < EASY_CUTOFF) {
    color = "text-green-500"
    label = "Easy Peasy"
    emoji = "🍋"
  } else if (difficultyScore < MEDIUM_CUTOFF) {
    color = "text-yellow-500"
    label = "Tricky Nut"
    emoji = "🥜"
  } else {
    color = "text-amber-800"
    label = "Tough Cookie"
    emoji = "🍪"
  }

  return (
    <div className={cn("flex items-center gap-1", color, className)}>
      <span className="text-base leading-none">{emoji}</span>
      <span className="text-xs">{label}</span>
    </div>
  )
} 
=== file-upload.tsx ===
'use client';

import { useRef, useState, useCallback } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Upload, File as FileIcon, X, PlusCircle } from 'lucide-react';
import React from 'react';

// Function to create a new File with a unique name
const createUniqueFile = (file: File): File => {
  // Extract the extension
  const nameComponents = file.name.split('.');
  const extension = nameComponents.length > 1 ? nameComponents.pop() : '';
  const baseName = nameComponents.join('.');
  
  // Create a timestamp-based name
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const uniqueName = `${baseName}_${timestamp}.${extension}`;
  
  // Create new file with unique name (but keeping same content and type)
  return new File([file], uniqueName, { type: file.type });
};

interface FileUploadProps {
  onFilesSelected: (files: File[]) => void;
  supportedFileTypes: string;
  supportedExtensions: string[];
  maxFileSize?: number; // in MB
}

export const FileUpload = (
  {
    onFilesSelected,
    supportedFileTypes,
    supportedExtensions,
    maxFileSize = 25
  }: FileUploadProps
) => {
  const [dragActive, setDragActive] = useState(false);
  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);
  const [error, setError] = useState<string | null>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  // Create a memoized version of the file update function to prevent unnecessary rerenders
  const updateParentFiles = useCallback(() => {
    console.log(`FileUpload: Updating parent with ${selectedFiles.length} files`);
    onFilesSelected([...selectedFiles]);
  }, [selectedFiles, onFilesSelected]);

  const handleDrag = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();
    
    if (e.type === 'dragenter' || e.type === 'dragover') {
      setDragActive(true);
    } else if (e.type === 'dragleave') {
      setDragActive(false);
    }
  };

  const validateFiles = (files: FileList | null): boolean => {
    if (!files || files.length === 0) return false;
    
    // Check file extensions
    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      const extension = file.name.split('.').pop()?.toLowerCase() || '';
      
      if (!supportedExtensions.includes(`.${extension}`)) {
        setError(`File type not supported. Please upload ${supportedFileTypes}.`);
        return false;
      }
      
      // Check file size
      if (file.size > maxFileSize * 1024 * 1024) {
        setError(`File size exceeds the ${maxFileSize}MB limit.`);
        return false;
      }
    }
    
    return true;
  };

  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
    
    const { files } = e.dataTransfer;
    handleFiles(files);
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { files } = e.target;
    handleFiles(files);
  };

  const handleFiles = (files: FileList | null) => {
    setError(null);
    
    if (!files || files.length === 0) {
      if (!error) {
        setError('No files were selected.');
      }
      return;
    }
    
    // Create an array of new files to add
    const newFiles: File[] = [];
    let hasError = false;
    
    // Validate each file before adding
    for (let i = 0; i < files.length; i++) {
      let file = files[i];
      const extension = file.name.split('.').pop()?.toLowerCase() || '';
      
      // Check file extension
      if (!supportedExtensions.includes(`.${extension}`)) {
        setError(`File "${file.name}" type not supported. Please upload ${supportedFileTypes}.`);
        hasError = true;
        continue;
      }
      
      // Check file size
      if (file.size > maxFileSize * 1024 * 1024) {
        setError(`File "${file.name}" exceeds the ${maxFileSize}MB limit.`);
        hasError = true;
        continue;
      }
      
      // Check if this is potentially an iOS camera photo or a duplicate filename
      const isIosPhoto = file.name === 'image.jpg' || file.name === 'image.jpeg';
      const isDuplicate = selectedFiles.some(existingFile => existingFile.name === file.name) ||
        newFiles.some(newFile => newFile.name === file.name);
      
      // Always rename iOS photos and any duplicate filenames
      if (isIosPhoto || isDuplicate) {
        console.log(`Renaming file with duplicate name: ${file.name}`);
        file = createUniqueFile(file);
        console.log(`New unique name: ${file.name}`);
      }
      
      newFiles.push(file);
    }
    
    // Only update state if we have files to add and no errors
    if (newFiles.length > 0) {
      console.log(`Adding ${newFiles.length} new files to state`);
      // Update the state with the new files and notify parent
      setSelectedFiles(prev => {
        const updatedFiles = [...prev, ...newFiles];
        // Call the parent callback only after state update is complete
        setTimeout(() => onFilesSelected(updatedFiles), 0);
        return updatedFiles;
      });
    } else if (!hasError) {
      // If we have no files to add but also no error, set an informative error
      setError('No valid files were selected.');
    }
  };

  const handleButtonClick = () => {
    // Make sure input is reset before clicking to avoid issues with previously selected files
    if (inputRef.current) {
      inputRef.current.value = '';
    }
    
    // Then trigger the file selection
    inputRef.current?.click();
  };

  const removeFile = (index: number) => {
    console.log(`Removing file at index ${index}`);
    
    setSelectedFiles(prev => {
      const newFiles = [...prev];
      console.log(`Current files: ${newFiles.length}, removing index ${index}`);
      newFiles.splice(index, 1);
      console.log(`New files count: ${newFiles.length}`);
      
      // Notify parent of the updated files
      setTimeout(() => onFilesSelected(newFiles), 0);
      
      return newFiles;
    });
    
    // Clear any error messages
    setError(null);
  };

  const clearFiles = () => {
    console.log('Clearing all files');
    
    // Reset the selected files state
    setSelectedFiles([]);
    
    // Notify parent of cleared files
    setTimeout(() => onFilesSelected([]), 0);
    
    // Reset the file input value - important for making sure any re-selection works properly
    if (inputRef.current) {
      inputRef.current.value = '';
    }
    
    // Clear any error messages
    setError(null);
    
    // Log for debugging
    console.log('All files cleared');
  };

  return (
    <div className="w-full">
      {/* File input */}
      <input
        ref={inputRef}
        type="file"
        multiple
        accept={supportedExtensions.join(',')}
        onChange={handleChange}
        className="hidden"
      />
      
      {/* Dropzone */}
      <Card
        className={`w-full p-6 border-2 border-dashed transition-colors ${
          dragActive ? 'border-primary bg-primary/5' : 'border-muted-foreground/25'
        }`}
        onDragEnter={handleDrag}
        onDragOver={handleDrag}
        onDragLeave={handleDrag}
        onDrop={handleDrop}
      >
        {selectedFiles.length > 0 ? (
          <div className="space-y-4">
            <div className="flex flex-col sm:flex-row gap-2 sm:gap-0 justify-between items-start sm:items-center">
              <h3 className="font-medium">Selected Files</h3>
              {/* On desktop, buttons stay in the header */}
              <div className="hidden sm:flex items-center gap-2">
                <Button 
                  type="button"
                  variant="outline" 
                  size="sm" 
                  onClick={handleButtonClick}
                >
                  <PlusCircle className="h-4 w-4 mr-1.5" />
                  Add More Files
                </Button>
                <Button 
                  type="button"
                  variant="ghost" 
                  size="sm" 
                  onClick={clearFiles}
                >
                  <X className="h-4 w-4 mr-1" />
                  Clear All
                </Button>
              </div>
            </div>
            
            <div className="space-y-2 mt-2">
              {selectedFiles.map((file, index) => (
                <div key={index} className="flex items-center justify-between p-2 bg-muted rounded-md">
                  <div className="flex items-center overflow-hidden max-w-[calc(100%-36px)]">
                    <FileIcon className="h-4 w-4 flex-shrink-0 mr-2 text-muted-foreground" />
                    <div className="overflow-hidden">
                      <span className="text-xs sm:text-sm font-medium truncate block">{file.name}</span>
                      <span className="text-xs text-muted-foreground">
                        ({(file.size / (1024 * 1024)).toFixed(2)} MB)
                      </span>
                    </div>
                  </div>
                  <Button
                    variant="ghost"
                    size="icon"
                    className="h-6 w-6 flex-shrink-0"
                    onClick={() => removeFile(index)}
                    type="button"
                  >
                    <X className="h-3 w-3" />
                  </Button>
                </div>
              ))}
            </div>

            {/* Mobile buttons below file list */}
            <div className="flex flex-col sm:hidden gap-2 mt-3">
              <Button 
                type="button"
                variant="outline" 
                className="w-full"
                size="sm" 
                onClick={handleButtonClick}
              >
                <PlusCircle className="h-4 w-4 mr-1.5" />
                Add More Files
              </Button>
              <Button 
                type="button"
                variant="outline" 
                size="sm"
                className="w-full" 
                onClick={clearFiles}
              >
                <X className="h-4 w-4 mr-1.5" />
                Clear All
              </Button>
            </div>

            {/* Add iOS Safari note */}
            {selectedFiles.some(file => file.name.includes('image_20') && (file.name.includes('.jpg') || file.name.includes('.jpeg'))) && (
              <div className="mt-1 text-xs text-blue-600 p-2 bg-blue-50 rounded-md">
                <strong>iOS User?</strong> We've automatically renamed your photos to ensure they can be processed individually.
              </div>
            )}
          </div>
        ) : (
          <div className="flex flex-col items-center justify-center text-center py-6 sm:py-8">
            <div className="rounded-full bg-primary/10 p-3 mb-3">
              <Upload className="h-6 w-6 sm:h-8 sm:w-8 text-primary" />
            </div>
            <h3 className="font-medium text-base sm:text-lg">Upload Files</h3>
            <p className="text-xs sm:text-sm text-muted-foreground mt-1 mb-2 sm:mb-3">
              Drag and drop or click to upload
            </p>
            <p className="text-xs text-muted-foreground">
              Supported formats: {supportedFileTypes}
            </p>
            <p className="text-xs text-muted-foreground">
              Max size: {maxFileSize}MB
            </p>
            <Button 
              type="button"
              variant="outline" 
              onClick={handleButtonClick}
              className="mt-3 sm:mt-4"
            >
              Browse Files
            </Button>
          </div>
        )}
      </Card>
      
      {/* Error message */}
      {error && (
        <p className="text-sm text-destructive mt-2">{error}</p>
      )}
    </div>
  );
}; 
=== deck-list.tsx ===
// components/deck-list.tsx
"use client"

import { useState, useEffect, useCallback } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { PlusCircle, Edit } from "lucide-react"
import { useDecks } from "@/hooks/use-decks"
import { useRouter } from "next/navigation"
import { useStudySessionStore } from "@/store/studySessionStore"
import Link from 'next/link'
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"
import { DeckProgressBar } from "@/components/deck/DeckProgressBar"
import { useSettings } from "@/providers/settings-provider"
import { cn } from "@/lib/utils"
import { Separator } from "@/components/ui/separator"
import { StudyModeButtons } from "@/components/study/StudyModeButtons"
import { getCardSrsStatesByIds } from '@/lib/actions/cardSrsActions';
import { resolveStudyQuery } from '@/lib/actions/studyQueryActions';
import { isValid, parseISO } from 'date-fns';

export function DeckList() {
  const { decks, loading, refetchDecks } = useDecks() // Added refetchDecks
  const { settings, loading: settingsLoading } = useSettings() // Get settings
  const [isVisible, setIsVisible] = useState(true)
  const router = useRouter() // Keep router
  const [deckCardCounts, setDeckCardCounts] = useState<{
    [deckId: string]: { learn: number; review: number }
  }>({});
  const [isLoadingCounts, setIsLoadingCounts] = useState(true);

  // Effect for handling page visibility (for spinner animation)
  useEffect(() => {
    const handleVisibilityChange = () => setIsVisible(!document.hidden);
    if (typeof document !== 'undefined') {
      document.addEventListener('visibilitychange', handleVisibilityChange);
      setIsVisible(!document.hidden); // Set initial state
      // Cleanup listener on component unmount
      return () => document.removeEventListener('visibilitychange', handleVisibilityChange);
    }
  }, [])

  // Effect to refetch decks when page becomes visible again after being hidden
  // This helps keep the list fresh if the user navigates away and back
   useEffect(() => {
     if (isVisible && !loading) {
        // Optional: Add a check to avoid refetching too frequently if needed
        console.log("[DeckList] Page visible, refetching decks.");
        refetchDecks();
     }
     // eslint-disable-next-line react-hooks/exhaustive-deps
   }, [isVisible]); // Rerun only when visibility changes

  // Navigate to the edit page for a specific deck
  const handleEditDeck = (deckId: string) => {
    router.push(`/edit/${deckId}`)
  }

  // Navigate to the intermediate deck creation choice page
  const handleCreateDeckClick = () => {
    console.log("[DeckList] Navigating to deck creation choice page.");
    router.push('/decks/create-choice'); // Navigate to the choice page
  }

  // Handle combined loading state
  const isLoading = loading || settingsLoading;

  // Legend data - UPDATED with hex codes
  const legendStages = [
    { name: 'New', startColor: '#EC4899', endColor: '#EF4444' },
    { name: 'Learning', startColor: '#DA55C6', endColor: '#9353DD' },
    { name: 'Young', startColor: '#6055DA', endColor: '#5386DD' },
    { name: 'Mature', startColor: '#55A9DA', endColor: '#53DDDD' },
  ];

  // Function to fetch all card counts at once
  const fetchAllDeckCardCounts = useCallback(async () => {
    if (!decks?.length) return;
    
    setIsLoadingCounts(true);
    
    try {
      console.log('[DeckList] Batch fetching card counts for all decks');
      
      // For each deck, get card IDs
      const deckCardsPromises = decks.map(deck => 
        resolveStudyQuery({
          criteria: { 
            deckId: deck.id, 
            tagLogic: 'ANY' as const,
            includeDifficult: false 
          }
        })
      );
      
      // Wait for all queries to complete
      const deckCardsResults = await Promise.all(deckCardsPromises);
      
      // Collect all card IDs
      const allCardIds: string[] = [];
      const deckCardIds: {[deckId: string]: string[]} = {};
      
      decks.forEach((deck, index) => {
        const cardIds = deckCardsResults[index].data || [];
        deckCardIds[deck.id] = cardIds;
        allCardIds.push(...cardIds);
      });
      
      if (allCardIds.length === 0) {
        console.log('[DeckList] No cards found in any deck');
        setDeckCardCounts({});
        setIsLoadingCounts(false);
        return;
      }
      
      // Get SRS states for all cards in one request
      const srsStatesResult = await getCardSrsStatesByIds([...new Set(allCardIds)]);
      
      if (srsStatesResult.error || !srsStatesResult.data) {
        console.error('Error fetching SRS states:', srsStatesResult.error);
        setIsLoadingCounts(false);
        return;
      }
      
      // Process the results
      const now = new Date();
      const cardStates = srsStatesResult.data;
      const cardStateMap = new Map();
      
      // Create a lookup for faster access
      cardStates.forEach(state => {
        cardStateMap.set(state.id, state);
      });
      
      // Calculate counts for each deck
      const newCounts: {[deckId: string]: {learn: number; review: number}} = {};
      
      Object.entries(deckCardIds).forEach(([deckId, cardIds]) => {
        let learnCount = 0;
        let reviewCount = 0;
        
        cardIds.forEach(cardId => {
          const state = cardStateMap.get(cardId);
          if (!state) return;
          
          // Learn Mode eligibility
          if (state.srs_level === 0 && 
              (state.learning_state === null || state.learning_state === 'learning')) {
            learnCount++;
          }
          
          // Review Mode eligibility
          const isGraduatedOrRelearning = 
            (state.srs_level !== null && state.srs_level !== undefined && state.srs_level >= 1) || 
            (state.srs_level === 0 && state.learning_state === 'relearning');
          
          const isDue = 
            state.next_review_due && 
            isValid(parseISO(state.next_review_due)) && 
            parseISO(state.next_review_due) <= now;
          
          if (isGraduatedOrRelearning && isDue) {
            reviewCount++;
          }
        });
        
        newCounts[deckId] = { learn: learnCount, review: reviewCount };
      });
      
      console.log('[DeckList] Calculated counts for all decks:', newCounts);
      
      // Log an example of a single deck's counts for better debugging
      if (Object.keys(newCounts).length > 0) {
        const firstDeckId = Object.keys(newCounts)[0];
        console.log(`[DeckList] Example count for deck ${firstDeckId}:`, newCounts[firstDeckId]);
      }
      
      // Log state before update
      console.log('[DeckList] Current state before update:', deckCardCounts);
      
      // Update state
      setDeckCardCounts(newCounts);
      
      // This won't show the updated state due to React's state batching, but logging here for sequence
      console.log('[DeckList] Updated deckCardCounts state');
    } catch (error) {
      console.error('Error in batch card count calculation:', error);
    } finally {
      setIsLoadingCounts(false);
    }
  }, [decks]);
  
  // Fetch counts when decks load
  useEffect(() => {
    fetchAllDeckCardCounts();
  }, [fetchAllDeckCardCounts]);
  
  // Track loading state changes
  useEffect(() => {
    console.log('[DeckList] isLoadingCounts changed to:', isLoadingCounts);
  }, [isLoadingCounts]);

  // Render loading state
  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64">
        {/* Spinner animation */}
        <div
          className={`h-12 w-12 rounded-full border-2 border-primary ${isVisible ? 'animate-spin border-b-transparent' : ''}`}
          style={{
            animation: isVisible ? 'spin 1s linear infinite' : 'none',
            borderBottomColor: 'transparent'
          }}
        />
      </div>
    )
  }

  // Get setting value, default to true if settings not loaded yet
  const showDeckProgress = settings?.showDeckProgress ?? true;

  // Main component render
  return (
    <TooltipProvider>
      <div className="space-y-6 py-4 px-4 md:p-6">
        {/* Header section */}
        <div className="flex justify-between items-center flex-wrap gap-4 mb-6">
          {/* Title remains */}
          <h2 className="text-2xl font-semibold">Your Decks</h2>
          {/* Create button remains */}
          <div className="flex items-center gap-2 flex-wrap">
            <Button onClick={handleCreateDeckClick}>
              <PlusCircle className="mr-2 h-4 w-4" />
              Create Deck
            </Button>
          </div>
        </div>

        {/* Grid container */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {/* Display message if no decks exist */}
          {decks.length === 0 ? (
            <div className="col-span-full text-center text-muted-foreground mt-10">
              <p>You haven't created any decks yet.</p>
              {/* Button to create the first deck */}
              <Button onClick={handleCreateDeckClick} className="mt-4">
                <PlusCircle className="mr-2 h-4 w-4" />
                Create Your First Deck
              </Button>
            </div>
          ) : (
            // Map through existing decks and render a card for each
            decks.map((deck) => {
              const totalCards = (deck.new_count ?? 0) +
                                 (deck.learning_count ?? 0) +
                                 (deck.young_count ?? 0) +
                                 (deck.mature_count ?? 0);
              // Format language display based on whether the deck is bilingual
              let languageDisplay = deck.primary_language || 'Lang not set';
              if (deck.is_bilingual && deck.secondary_language) {
                  languageDisplay = `${deck.primary_language ?? '?'} / ${deck.secondary_language ?? '?'}`;
              }

              return (
                <Card key={deck.id} className="hover:shadow-md transition-shadow flex flex-col bg-gradient-to-b from-slate-100/40 dark:from-slate-800/40 to-transparent dark:border-slate-700">
                  <CardHeader className="pt-4 pb-2 space-y-1 px-4">
                    <div className="flex justify-between items-center">
                      {/* Deck name (truncated if long) */}
                      <CardTitle className="truncate text-lg" title={deck.name}>{deck.name}</CardTitle>
                      {/* Edit button with tooltip */}
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <Button
                            variant="ghost"
                            size="icon"
                            onClick={() => handleEditDeck(deck.id)}
                            className="h-7 w-7 flex-shrink-0 text-muted-foreground"
                            aria-label={`Edit deck ${deck.name}`}
                          >
                            <Edit className="h-4 w-4" />
                          </Button>
                        </TooltipTrigger>
                        <TooltipContent>
                          <p>Edit Deck</p>
                        </TooltipContent>
                      </Tooltip>
                    </div>
                    {/* Deck metadata */}
                    <CardDescription className="text-sm">
                      {totalCards} card{totalCards !== 1 ? 's' : ''} • {languageDisplay}
                    </CardDescription>
                  </CardHeader>
                  {/* Footer with study buttons */}
                  <CardFooter className="flex justify-center pt-4 px-4 pb-4">
                    {/* Replace the buttons with the new component */}
                    <StudyModeButtons 
                      studyType="deck" 
                      contentId={deck.id} 
                      size="sm"
                      preCalculatedLearnCount={deckCardCounts[deck.id]?.learn}
                      preCalculatedReviewCount={deckCardCounts[deck.id]?.review}
                      batchFetchInProgress={isLoadingCounts}
                    />
                  </CardFooter>
                  {/* Conditionally render Separator AND DeckProgressBar */}
                  {showDeckProgress && (
                    <>
                      <Separator />
                      <CardContent className="px-4 pt-4 pb-4 bg-slate-50 dark:bg-slate-700/50 rounded-b-lg">
                        <DeckProgressBar
                          newCount={deck.new_count ?? 0}
                          learningCount={deck.learning_count ?? 0}
                          youngCount={deck.young_count ?? 0}
                          matureCount={deck.mature_count ?? 0}
                        />
                      </CardContent>
                    </>
                  )}
                </Card>
              )
            })
          )}
        </div>

        {/* Expanded Legend */}
        {showDeckProgress && decks.length > 0 && (
          <div className="mt-4 flex justify-end">
            <div className="text-xs text-muted-foreground flex flex-wrap gap-x-3 gap-y-1 p-2 border rounded-md bg-background shadow-sm">
              {legendStages.map(stage => (
                <span key={stage.name} className="flex items-center gap-1">
                  {/* Apply inline gradient style to legend chip */}
                  <span
                    className="h-2 w-3 rounded"
                    style={{ backgroundImage: `linear-gradient(to right, ${stage.startColor}, ${stage.endColor})` }}
                  ></span>
                  {stage.name}
                </span>
              ))}
            </div>
          </div>
        )}

      </div>
    </TooltipProvider>
  )
}
=== DeckListClient.tsx ===
"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { PlusCircle, Edit } from "lucide-react";
import { useRouter } from "next/navigation";
import { useStudySessionStore } from "@/store/studySessionStore";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { DeckProgressBar } from "@/components/deck/DeckProgressBar";
import { useSettings } from "@/providers/settings-provider";
import { cn } from "@/lib/utils";
import { Separator } from "@/components/ui/separator";
import { StudyModeButtons } from "@/components/study/StudyModeButtons";
import { useDecks } from "@/hooks/use-decks";

// Type for enhanced deck data that includes learn/review counts
interface EnhancedDeck {
  id: string;
  name: string;
  primary_language: string | null;
  secondary_language: string | null;
  is_bilingual: boolean;
  updated_at: string;
  new_count: number;
  learning_count: number;
  young_count: number;
  mature_count: number;
  learn_eligible_count: number;
  review_eligible_count: number;
}

interface DeckListClientProps {
  initialData?: EnhancedDeck[];
}

export function DeckListClient({ initialData }: DeckListClientProps) {
  const { decks: fallbackDecks, loading: fallbackLoading, refetchDecks } = useDecks();
  const { settings, loading: settingsLoading } = useSettings();
  const [isVisible, setIsVisible] = useState(true);
  const router = useRouter();
  
  // Use initialData if provided, otherwise fall back to client-side fetching
  const [decks, setDecks] = useState<EnhancedDeck[]>(initialData || []);
  const isUsingInitialData = Boolean(initialData);
  
  // If initial data is not provided, we need to use the fallback
  const isLoading = !isUsingInitialData && (fallbackLoading || settingsLoading);

  // Effect for handling page visibility
  useEffect(() => {
    const handleVisibilityChange = () => setIsVisible(!document.hidden);
    if (typeof document !== 'undefined') {
      document.addEventListener('visibilitychange', handleVisibilityChange);
      setIsVisible(!document.hidden); // Set initial state
      return () => document.removeEventListener('visibilitychange', handleVisibilityChange);
    }
  }, []);

  // If we don't have initial data, we need to update decks when fallbackDecks changes
  useEffect(() => {
    if (!isUsingInitialData && fallbackDecks && fallbackDecks.length > 0) {
      // Convert fallbackDecks to EnhancedDeck format
      // This won't have learn_eligible_count and review_eligible_count initially
      const convertedDecks = fallbackDecks.map(deck => ({
        ...deck,
        learn_eligible_count: 0,  // Will be calculated later in StudyModeButtons
        review_eligible_count: 0  // Will be calculated later in StudyModeButtons
      })) as EnhancedDeck[];
      
      setDecks(convertedDecks);
    }
  }, [fallbackDecks, isUsingInitialData]);

  // Effect to refetch decks when page becomes visible again
  useEffect(() => {
    if (isVisible && !isUsingInitialData && !fallbackLoading) {
      console.log("[DeckListClient] Page visible, refetching decks.");
      refetchDecks();
    }
  }, [isVisible, isUsingInitialData, fallbackLoading, refetchDecks]);

  // Navigate to the edit page for a specific deck
  const handleEditDeck = (deckId: string) => {
    router.push(`/edit/${deckId}`);
  };

  // Navigate to the intermediate deck creation choice page
  const handleCreateDeckClick = () => {
    console.log("[DeckListClient] Navigating to deck creation choice page.");
    router.push('/decks/create-choice');
  };

  // Legend data with hex codes
  const legendStages = [
    { name: 'New', startColor: '#EC4899', endColor: '#EF4444' },
    { name: 'Learning', startColor: '#DA55C6', endColor: '#9353DD' },
    { name: 'Young', startColor: '#6055DA', endColor: '#5386DD' },
    { name: 'Mature', startColor: '#55A9DA', endColor: '#53DDDD' },
  ];

  // Render loading state
  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div
          className={`h-12 w-12 rounded-full border-2 border-primary ${isVisible ? 'animate-spin border-b-transparent' : ''}`}
          style={{
            animation: isVisible ? 'spin 1s linear infinite' : 'none',
            borderBottomColor: 'transparent'
          }}
        />
      </div>
    );
  }

  // Get setting value, default to true if settings not loaded yet
  const showDeckProgress = settings?.showDeckProgress ?? true;

  // Main component render
  return (
    <TooltipProvider>
      <div className="space-y-6 py-4 px-4 md:p-6">
        {/* Header section */}
        <div className="flex justify-between items-center flex-wrap gap-4 mb-6">
          <h2 className="text-2xl font-semibold">Your Decks</h2>
          <div className="flex items-center gap-2 flex-wrap">
            <Button onClick={handleCreateDeckClick}>
              <PlusCircle className="mr-2 h-4 w-4" />
              Create Deck
            </Button>
          </div>
        </div>

        {/* Grid container */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {/* Display message if no decks exist */}
          {decks.length === 0 ? (
            <div className="col-span-full text-center text-muted-foreground mt-10">
              <p>You haven't created any decks yet.</p>
              <Button onClick={handleCreateDeckClick} className="mt-4">
                <PlusCircle className="mr-2 h-4 w-4" />
                Create Your First Deck
              </Button>
            </div>
          ) : (
            // Map through existing decks and render a card for each
            decks.map((deck) => {
              const totalCards = (deck.new_count ?? 0) +
                                 (deck.learning_count ?? 0) +
                                 (deck.young_count ?? 0) +
                                 (deck.mature_count ?? 0);
              // Format language display based on whether the deck is bilingual
              let languageDisplay = deck.primary_language || 'Lang not set';
              if (deck.is_bilingual && deck.secondary_language) {
                  languageDisplay = `${deck.primary_language ?? '?'} / ${deck.secondary_language ?? '?'}`;
              }

              return (
                <Card key={deck.id} className="hover:shadow-md transition-shadow flex flex-col bg-gradient-to-b from-slate-100/40 dark:from-slate-800/40 to-transparent dark:border-slate-700">
                  <CardHeader className="pt-4 pb-2 space-y-1 px-4">
                    <div className="flex justify-between items-center">
                      {/* Deck name (truncated if long) */}
                      <CardTitle className="truncate text-lg" title={deck.name}>{deck.name}</CardTitle>
                      {/* Edit button with tooltip */}
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <Button
                            variant="ghost"
                            size="icon"
                            onClick={() => handleEditDeck(deck.id)}
                            className="h-7 w-7 flex-shrink-0 text-muted-foreground"
                            aria-label={`Edit deck ${deck.name}`}
                          >
                            <Edit className="h-4 w-4" />
                          </Button>
                        </TooltipTrigger>
                        <TooltipContent>
                          <p>Edit Deck</p>
                        </TooltipContent>
                      </Tooltip>
                    </div>
                    {/* Deck metadata */}
                    <CardDescription className="text-sm">
                      {totalCards} card{totalCards !== 1 ? 's' : ''} • {languageDisplay}
                    </CardDescription>
                  </CardHeader>
                  {/* Footer with study buttons */}
                  <CardFooter className="flex justify-center pt-4 px-4 pb-4">
                    {/* Use pre-calculated counts from server if available */}
                    <StudyModeButtons 
                      studyType="deck" 
                      contentId={deck.id} 
                      size="sm"
                      preCalculatedLearnCount={isUsingInitialData ? deck.learn_eligible_count : undefined}
                      preCalculatedReviewCount={isUsingInitialData ? deck.review_eligible_count : undefined}
                      batchFetchInProgress={false}
                    />
                  </CardFooter>
                  {/* Conditionally render Separator AND DeckProgressBar */}
                  {showDeckProgress && (
                    <>
                      <Separator />
                      <CardContent className="px-4 pt-4 pb-4 bg-slate-50 dark:bg-slate-700/50 rounded-b-lg">
                        <DeckProgressBar
                          newCount={deck.new_count ?? 0}
                          learningCount={deck.learning_count ?? 0}
                          youngCount={deck.young_count ?? 0}
                          matureCount={deck.mature_count ?? 0}
                        />
                      </CardContent>
                    </>
                  )}
                </Card>
              )
            })
          )}
        </div>

        {/* Expanded Legend */}
        {showDeckProgress && decks.length > 0 && (
          <div className="mt-4 flex justify-end">
            <div className="text-xs text-muted-foreground flex flex-wrap gap-x-3 gap-y-1 p-2 border rounded-md bg-background shadow-sm">
              {legendStages.map(stage => (
                <span key={stage.name} className="flex items-center gap-1">
                  <span
                    className="h-2 w-3 rounded"
                    style={{ backgroundImage: `linear-gradient(to right, ${stage.startColor}, ${stage.endColor})` }}
                  ></span>
                  {stage.name}
                </span>
              ))}
            </div>
          </div>
        )}
      </div>
    </TooltipProvider>
  );
} 
=== deck/EditableCardTable.tsx ===
'use client';

import React, { useState, useMemo, useCallback, useEffect } from 'react';
import { debounce } from '@/lib/utils';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Textarea } from '@/components/ui/textarea'; // Using Textarea for potentially longer content
import { Button } from '@/components/ui/button';
import { Trash2, Loader2 } from 'lucide-react';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from '@/components/ui/alert-dialog';
import { toast } from 'sonner';
import { updateCard, deleteCard } from '@/lib/actions/cardActions'; // Ensure these actions exist and path is correct
import type { Tables } from '@/types/database'; // Use your generated types

type DbCard = Tables<'cards'>;

interface EditableCardTableProps {
  initialCards: DbCard[];
  deckId: string;
  onCardUpdated: (updatedCard: DbCard) => void;
}

// Sub-component for managing row state and interactions
function EditableCardRow({
  card,
  onDelete,
  onCardUpdated
}: {
  card: DbCard;
  onDelete: (cardId: string) => Promise<void>;
  onCardUpdated: (updatedCard: DbCard) => void;
}) {
  const [questionContent, setQuestionContent] = useState(card.question ?? '');
  const [answerContent, setAnswerContent] = useState(card.answer ?? '');
  const [isSaving, setIsSaving] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);

  // --- Debounced Update Action ---
  const debouncedUpdate = useMemo(
    () =>
      debounce(async (field: 'question' | 'answer', value: string) => {
        // Check for actual change
        if (field in card && card[field as keyof DbCard] === value) return;

        // Prevent saving empty required fields
        const trimmedValue = value.trim();
        if (!trimmedValue) {
          toast.info(`Cannot save empty ${field}.`);
          // Optional: Revert UI to original value if desired, but might be jarring
          // if (field === 'question') setQuestionContent(card.question ?? '');
          // if (field === 'answer') setAnswerContent(card.answer ?? '');
          return; // Stop before calling action
        }

        setIsSaving(true);
        // Pass correct field names to action (using trimmedValue might be safer)
        const result = await updateCard(card.id, { [field]: trimmedValue });
        setIsSaving(false);

        if (result?.error) {
          const errorMessage = typeof result.error === 'object' && result.error && 'message' in result.error 
                                ? (result.error as { message: string }).message 
                                : String(result.error);
          toast.error(`Failed to update ${field}`, {
            description: errorMessage,
          });
          if (field === 'question') setQuestionContent(card.question ?? '');
          if (field === 'answer') setAnswerContent(card.answer ?? '');
        } else {
          // Optional success toast
          // Call the callback on successful update
          if (result.data) {
            onCardUpdated(result.data); 
          }
        }
      }, 750),
    [card.id, card.question, card.answer, onCardUpdated]
  );

  // Cleanup debounce on unmount - Removed as utils/debounce might not support .cancel()
  /*
  useEffect(() => {
    return () => {
      debouncedUpdate.cancel(); 
    };
  }, [debouncedUpdate]);
  */

  const handleQuestionChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setQuestionContent(e.target.value);
    debouncedUpdate('question', e.target.value);
  };

  const handleAnswerChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setAnswerContent(e.target.value);
    debouncedUpdate('answer', e.target.value);
  };

  const handleDeleteConfirm = async () => {
      setIsDeleting(true);
      await onDelete(card.id); // Call parent delete handler
      // No need to setIsDeleting(false) here as the row will be removed on success
      // Parent component handles UI update and closing dialog
      setShowDeleteConfirm(false); // Ensure dialog closes even if parent update is slow
  };

  return (
    <TableRow key={card.id}>
      <TableCell className="align-top py-2">
        <Textarea
          value={questionContent}
          onChange={handleQuestionChange}
          placeholder="Question content"
          className="min-h-[60px] resize-y" // Allow vertical resize
          rows={2}
          aria-label={`Question content for card ${card.id}`}
        />
      </TableCell>
      <TableCell className="align-top py-2">
        <Textarea
          value={answerContent}
          onChange={handleAnswerChange}
          placeholder="Answer content"
          className="min-h-[60px] resize-y"
          rows={2}
          aria-label={`Answer content for card ${card.id}`}
        />
      </TableCell>
      <TableCell className="align-middle py-2 text-right">
        {isSaving && <Loader2 className="h-4 w-4 animate-spin inline-block mr-2" aria-label="Saving..."/>}
        <AlertDialog open={showDeleteConfirm} onOpenChange={setShowDeleteConfirm}>
          <AlertDialogTrigger asChild>
            <Button
              variant="ghost"
              size="icon"
              disabled={isDeleting}
              aria-label={`Delete Card ${card.id}`}
            >
              {isDeleting ? (
                  <Loader2 className="h-4 w-4 animate-spin" />
              ) : (
                  <Trash2 className="h-4 w-4 text-destructive" />
              )}
            </Button>
          </AlertDialogTrigger>
          <AlertDialogContent>
            <AlertDialogHeader>
              <AlertDialogTitle>Are you sure?</AlertDialogTitle>
              <AlertDialogDescription>
                This action cannot be undone. This will permanently delete this flashcard.
              </AlertDialogDescription>
            </AlertDialogHeader>
            <AlertDialogFooter>
              <AlertDialogCancel disabled={isDeleting}>Cancel</AlertDialogCancel>
              <AlertDialogAction
                onClick={handleDeleteConfirm}
                disabled={isDeleting}
                className="bg-destructive hover:bg-destructive/90"
              >
                {isDeleting ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
                Delete
              </AlertDialogAction>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>
      </TableCell>
    </TableRow>
  );
}


// Main Table Component
export function EditableCardTable({ initialCards, deckId, onCardUpdated }: EditableCardTableProps) {
  const [cards, setCards] = useState<DbCard[]>(initialCards);
  // const [isLoading, setIsLoading] = useState(false); // General loading state if needed

  // Update local state if initialCards prop changes (e.g., after adding a new card via CardEditor below)
  useEffect(() => {
    setCards(initialCards);
  }, [initialCards]);

  const handleDeleteCard = useCallback(async (cardId: string) => {
    const result = await deleteCard(cardId);
    if (result?.error) {
        const errorMessage = typeof result.error === 'object' && result.error && 'message' in result.error 
                             ? (result.error as { message: string }).message 
                             : String(result.error);
        toast.error("Failed to delete card", { description: errorMessage });
    } else {
        toast.success("Card deleted successfully.");
        setCards((prevCards) => prevCards.filter((c) => c.id !== cardId));
    }
  }, []);

  // Handler for card updates (updates local state)
   const handleCardUpdated = useCallback((updatedCard: DbCard) => {
       setCards(prevCards => prevCards.map(c => c.id === updatedCard.id ? updatedCard : c));
       onCardUpdated(updatedCard); // Notify parent
   }, [onCardUpdated]);

  return (
    <div className="space-y-4">
      <div className="border rounded-md overflow-x-auto"> {/* Added overflow-x-auto for responsiveness */}
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead className="min-w-[200px] w-[35%]">Question</TableHead>
              <TableHead className="min-w-[200px] w-[35%]">Answer</TableHead>
              <TableHead className="w-[80px] text-right">Actions</TableHead> {/* Adjusted width */}
            </TableRow>
          </TableHeader>
          <TableBody>
            {cards.length === 0 ? (
              <TableRow>
                <TableCell colSpan={3} className="text-center h-24 text-muted-foreground">
                  No cards in this deck yet. Use the "Add Card" section below.
                </TableCell>
              </TableRow>
            ) : (
              cards.map((card) => (
                <EditableCardRow
                  key={card.id}
                  card={card}
                  onDelete={handleDeleteCard}
                  onCardUpdated={handleCardUpdated}
                />
              ))
            )}
          </TableBody>
        </Table>
      </div>
    </div>
  );
} 
=== deck/DeckProgressBar.tsx ===
'use client';

import React, { useState, useEffect, useRef } from 'react';
import { cn } from '@/lib/utils';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";

interface DeckProgressBarProps {
  newCount: number;
  learningCount: number;
  youngCount: number;
  matureCount: number;
  onClick?: () => void;
}

// Custom hook to track element width
function useElementWidth(elementRef: React.RefObject<HTMLElement | null>) {
  const [width, setWidth] = useState(0);

  useEffect(() => {
    const currentElement = elementRef.current;
    if (!currentElement) return;

    const resizeObserver = new ResizeObserver(entries => {
      for (let entry of entries) {
        setWidth(entry.contentRect.width);
      }
    });

    resizeObserver.observe(currentElement);

    // Initial width set
    setWidth(currentElement.offsetWidth);

    return () => resizeObserver.disconnect();
  }, [elementRef]);

  return width;
}

export function DeckProgressBar({
  newCount,
  learningCount,
  youngCount,
  matureCount,
}: Omit<DeckProgressBarProps, 'onClick'>) {
  const totalCount = newCount + learningCount + youngCount + matureCount;
  const rootRef = useRef<HTMLDivElement>(null);
  const [hasAnimated, setHasAnimated] = useState(false);

  useEffect(() => {
    const timer = setTimeout(() => {
      setHasAnimated(true);
    }, 50);
    return () => clearTimeout(timer);
  }, []);

  // Define stages with gradient hex codes
  const stages = [
    { name: 'New', count: newCount, percentage: totalCount > 0 ? (newCount / totalCount) * 100 : 0, startColor: '#EC4899', endColor: '#EF4444' }, // Keep pink-500 to red-500
    { name: 'Learning', count: learningCount, percentage: totalCount > 0 ? (learningCount / totalCount) * 100 : 0, startColor: '#DA55C6', endColor: '#9353DD' },
    { name: 'Young', count: youngCount, percentage: totalCount > 0 ? (youngCount / totalCount) * 100 : 0, startColor: '#6055DA', endColor: '#5386DD' },
    { name: 'Mature', count: matureCount, percentage: totalCount > 0 ? (matureCount / totalCount) * 100 : 0, startColor: '#55A9DA', endColor: '#53DDDD' },
  ];

  // Placeholder for zero cards
  if (totalCount === 0) {
    return (
      <div
        ref={rootRef}
        className="h-3 w-full bg-muted rounded-lg flex items-center justify-center px-2"
      >
        <span className="text-xs text-muted-foreground">No cards yet</span>
      </div>
    );
  }

  // Calculate percentages safely
  const newPercentage = stages[0].percentage;
  const learningPercentage = stages[1].percentage;
  const youngPercentage = stages[2].percentage;
  const maturePercentage = stages[3].percentage;

  const ariaLabel = `Deck progress: ${Math.round(maturePercentage)}% mature, ${Math.round(youngPercentage)}% young, ${Math.round(learningPercentage)}% learning, ${Math.round(newPercentage)}% new. Total ${totalCount} cards.`;

  return (
    <div
      ref={rootRef}
      tabIndex={0}
      aria-label={ariaLabel}
      className={cn(
        "relative w-full h-3 rounded-lg overflow-hidden bg-muted",
        "focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background"
      )}
    >
      {/* Flex container for slices and gutters */}
      <div className="absolute inset-0 flex w-full h-full gap-px bg-border">
        {stages.map((stage) => {
          const label = `${stage.name} ${stage.count}`;
          const tooltipLabel = `${stage.name} ${stage.count} cards`;

          return (
            <Tooltip key={stage.name}>
              <TooltipTrigger asChild>
                {stage.percentage > 0 ? (
                  <div
                    className="h-full transition-colors"
                    style={{
                      width: `${stage.percentage}%`,
                      backgroundImage: `linear-gradient(to right, ${stage.startColor}, ${stage.endColor})`,
                    }}
                  />
                ) : (
                   <span style={{ width: '0px' }} />
                )}
              </TooltipTrigger>
              <TooltipContent>
                <p>{tooltipLabel}</p>
              </TooltipContent>
            </Tooltip>
          );
        })}
      </div>
      {/* Animation Overlay */}
      <div
        className={cn(
          'absolute inset-0 bg-background transition-transform duration-600 ease-out',
          hasAnimated ? '-translate-x-full' : 'translate-x-0'
        )}
      />
    </div>
  );
}
